{"version":3,"file":"index.next.min.js","sources":["../src/converters.ts","../src/helpers.ts","../src/A1Error.ts","../src/index.ts"],"sourcesContent":["/**\n * @file Contains converters from string to number and vice versa\n */\n\n/**\n * Converts column letter to number\n * @author AdamL\n * @see https://stackoverflow.com/questions/21229180/convert-column-index-into-corresponding-column-letter\n * @param {string} col\n *\n * @returns {number}\n */\nexport const colStringToNumber1 = (col: string): number =>\n{\n  const length = col.length;\n  let column = 0;\n  for(let i = 0; i < length; i++)\n    column += (col.charCodeAt(i) - 64) * Math.pow(26, length - i - 1);\n  return column;\n}\n\n/**\n * Converts column letter to number\n * @author Flambino\n * @see https://codereview.stackexchange.com/questions/90112/a1notation-conversion-to-row-column-index\n * @param {string} col\n *\n * @returns {number}\n */\nexport const colStringToNumber2 = (col: string): number =>\n{\n  let i,\n      l,\n      chr,\n      sum   = 0,\n      A     = 'A'.charCodeAt(0),\n      radix = 'Z'.charCodeAt(0) - A + 1;\n  for(i = 0, l = col.length; i < l; i++)\n  {\n    chr = col.charCodeAt(i);\n    sum = sum * radix + chr - A + 1;\n  }\n  return sum;\n}\n\n/**\n * Converts column number to letter\n * @author AdamL\n * @see https://stackoverflow.com/questions/21229180/convert-column-index-into-corresponding-column-letter\n * @param {number} col\n *\n * @returns {string}\n */\nexport const colNumberToString = (col: number): string =>\n{\n  let letter = '',\n      temp;\n  while(col > 0)\n  {\n    temp   = (col - 1) % 26;\n    letter = String.fromCharCode(temp + 65) + letter;\n    col    = (col - temp - 1) / 26;\n  }\n  return letter;\n}\n\n/**\n * Converts row string to number\n * @param {string} row\n *\n * @returns {number}\n */\nexport const rowStringToNumber = (row: string): number => parseInt(row, 10);\n\n/**\n * Converts row number to string\n * @param {number} row\n *\n * @returns {string}\n */\nexport const rowNumberToString = (row: number): string => String(row);\n","/**\n * @file Contains secondary functions\n */\n\n/**\n * Returns the type of a value\n * @param {unknown} some\n *\n * @returns {string}\n */\nexport const type = (some: unknown): string => typeof some;\n\n/**\n * Checks if a value is a string\n * @param {unknown} some\n *\n * @returns {boolean}\n */\nexport const isString = (some: unknown): boolean => type(some) === 'string';\n\n/**\n * Checks if a value is a number\n * @param {unknown} some\n *\n * @returns {boolean}\n */\nexport const isNumber = (some: unknown): boolean => type(some) === 'number' && Number.isInteger(some);\n\n/**\n * Checks if a value is a positive number\n * @param {unknown} some\n *\n * @returns {boolean}\n */\nexport const isPositiveNumber = (some: unknown): boolean => isNumber(some) && some > 0;\n\n/**\n * Checks if a value is a stringified number like \"1\", \"2\", ...\n * @param {unknown} some\n *\n * @returns {boolean}\n */\nexport const isStringifiedNumber = (some: unknown): boolean => isString(some) && /^[0-9]+$/.test(some as string) && isNumber(+some);\n\n/**\n * Checks if a value is a letter between a-zA-Z\n * @param {unknown} some\n *\n * @returns {boolean}\n */\nexport const isLetter = (some: unknown): boolean => isString(some) && /^[a-z]+$/i.test(some as string);\n\n/**\n * Checks validation of A1 notation\n * @param {unknown} some\n *\n * @returns {boolean}\n */\nexport const isValidA1 = (some: unknown): boolean => isString(some) && /^[A-Z]+\\d+(:[A-Z]+\\d+)?$/i.test(some as string);\n","/**\n *\t@fileOverview A1 notation errors\n */\nexport default class A1Error<T> extends Error\n{\n\tconstructor(a1: string)\n\tconstructor(col: number)\n\tconstructor(row: number)\n\tconstructor(unknown?: T)\n\tconstructor(something?: string | number | T)\n\t{\n\t\tconst str = JSON.stringify(something);\n\t\tsuper(str);\n\t\tthis.name \t\t= 'A1Error';\n\t\tthis.message \t= str;\n\t}\n\n\twasString(): A1Error<T>\n\t{\n\t\tthis.message = `Invalid A1 notation: ${this.message}`;\n\t\treturn this;\n\t}\n\n\twasNumber(): A1Error<T>\n\t{\n\t\tthis.message = `Invalid A1 number(s): ${this.message}`;\n\t\treturn this;\n\t}\n\n\twasUnknown(): A1Error<T>\n\t{\n\t\tthis.message = `Invalid A1 argument(s): ${this.message}`;\n\t\treturn this;\n\t}\n}\n","/**\n * @file Math operations and converting in A1 notation\n * Supports A1 notation like \"A1\" and \"A1:B2\"\n * @author FLighter\n */\n\nimport {\n  colStringToNumber1,// converter 1\n  colStringToNumber2,// converter 2\n  colNumberToString,\n  rowStringToNumber,\n  rowNumberToString,\n} from './converters';\nimport {\n  type,\n  isString,\n  isNumber,\n  isPositiveNumber,\n  isStringifiedNumber,\n  isLetter,\n  isValidA1,\n} from './helpers';\nimport A1Error from './A1Error';\nimport options from './options/options';\n\nclass A1\n{\n  // Regular expression for parsing\n  private static _reg:RegExp = /^([A-Z]+)(\\d+)(?::([A-Z]+)(\\d+))?$/;\n  /**\n   *\tExample: A1:B2\n   */\n  private _colStart: \tnumber \t= 0;// A -> 1\n  private _rowStart: \tnumber \t= 0;// 1 -> 1\n  private _colEnd: \tnumber \t= 0;// B -> 2\n  private _rowEnd: \tnumber \t= 0;// 2 -> 2\n  private _converter: 1 | 2 \t= 1;// converter 1 | 2\n\n  /**\n   *\tParses A1 notation\n   *\t@param {string} a1\n   *\t@param {1 | 2}  converter\n   *\n   *\t@return {object} {cs: number, rs: number, ce: number, re: number}\n   */\n  private static _parse(a1: string, converter: 1 | 2): {cs: number, rs: number, ce: number, re: number}\n  {\n    let [\n        ,\n        cs,// col start // A\n        rs,// row start // 1\n        ce,// col end \t// B\n        re,// row end \t// 2\n      ] = a1.toUpperCase().match(this._reg);\n    ce = ce || cs;\n    re = re || rs;\n    const colStart = this._A1Col(cs, converter),\n          colEnd   = this._A1Col(ce, converter),\n          rowStart = rowStringToNumber(rs),\n          rowEnd   = rowStringToNumber(re);\n    // For non-standard A1\n    return {\n      cs: colEnd > colStart ? colStart : colEnd,\n      rs: rowEnd > rowStart ? rowStart : rowEnd,\n      ce: colEnd > colStart ? colEnd \t : colStart,\n      re: rowEnd > rowStart ? rowEnd \t : rowStart,\n    }\n  }\n  /**\n   *\tConverts column letter to number using converter 1 or 2\n   *\t@param {string} a1\n   *\t@param {1 | 2} converter\n   *\n   *\t@return {number}\n   */\n  private static _A1Col(a1: string, converter: 1 | 2): number\n  {\n    return converter === 1 ? colStringToNumber1(a1) : colStringToNumber2(a1);\n  }\n\n  /******************\n   *\tSTATIC METHODS\n   ******************/\n  /**\n   *\tChecks A1 notation\n   *\t@param {string} a1\n   *\n   *\t@return {boolean}\n   */\n  static isValid(a1: string): boolean\n  {\n    return isValidA1(a1);\n  }\n  /**\n   *\tConverts the first column letter from A1 to number\n   *\t@param {string} a1\n   *\t@param {1 | 2} [converter = 1]\n   *\n   *\t@return {number}\n   */\n  static getCol(a1: string, converter: 1 | 2 = 1): number\n  {\n    if(!isValidA1(a1))\n      throw new A1Error(a1).wasString();\n    return this._parse(a1, converter).cs;\n  }\n  /**\n   *\tConverts the last column letter from A1 to number\n   *\t@param {string} a1\n   *\t@param {1 | 2} [converter = 1]\n   *\n   *\t@return {number}\n   */\n  static getLastCol(a1: string, converter: 1 | 2 = 1): number\n  {\n    if(!isValidA1(a1))\n      throw new A1Error(a1).wasString();\n    return this._parse(a1, converter).ce;\n  }\n  /**\n   *\tConverts number to column letter in A1\n   *\t@param {number} col\n   *\n   *\t@return {string}\n   */\n  static toCol(col: number): string\n  {\n    if(!isPositiveNumber(col))\n      throw new A1Error(col).wasNumber();\n    return colNumberToString(col);\n  }\n  /**\n   *\tConverts the first row string to number\n   *\t@param {string} a1\n   *\n   *\t@return {number}\n   */\n  static getRow(a1: string): number\n  {\n    if(!isValidA1(a1))\n      throw new A1Error(a1).wasString();\n    return this._parse(a1, 1).rs;\n  }\n  /**\n   *\tConverts the last row string to number\n   *\t@param {string} a1\n   *\n   *\t@return {number}\n   */\n  static getLastRow(a1: string): number\n  {\n    if(!isValidA1(a1))\n      throw new A1Error(a1).wasString();\n    return this._parse(a1, 1).re;\n  }\n  /**\n   *\tConverts number to row string in A1\n   *\t@param {number} row\n   *\n   *\t@return {string}\n   */\n  static toRow(row: number): string\n  {\n    if(!isPositiveNumber(row))\n      throw new A1Error(row).wasNumber();\n    return rowNumberToString(row);\n  }\n  /**\n   *\t@param {string} a1\n   *\t@param {1 | 2} [converter = 1]\n   *\n   *\t@return {number} columns count\n   */\n  static getWidth(a1: string, converter: 1 | 2 = 1): number\n  {\n    if(!isValidA1(a1))\n      throw new A1Error(a1).wasString();\n    let {ce, cs} = this._parse(a1, converter);\n    return ce - cs + 1;\n  }\n  /**\n   *\t@param {string} a1\n   *\n   *\t@return {number} rows count\n   */\n  static getHeight(a1: string): number\n  {\n    if(!isValidA1(a1))\n      throw new A1Error(a1).wasString();\n    let {re, rs} = this._parse(a1, 1);\n    return re - rs + 1;\n  }\n\n  /***************\n   *\tCONSTRUCTOR\n   ***************/\n\n  /**\n   *\tIt handles case:\n   *\tconstructor(object: options)\n   *\t@param {options} options\n   */\n  private _initObject(options: options): void\n  {\n    const {\n      a1Start,\n      a1End,\n      colStart,\n      colEnd,\n      rowStart,\n      rowEnd,\n      nCols,\n      nRows,\n      converter,\n    } = options;\n\n    // Set converter\n    this._converter = converter === 2 ? 2 : 1;\n\n    let cs: number,\n        ce: number,\n        rs: number,\n        re: number;\n\n    const getValue = (some: unknown, canBeLetter: boolean = true): number =>\n    {\n      if(isPositiveNumber(some) || isStringifiedNumber(some))\n        return +some;\n      if(canBeLetter && isLetter(some))\n        return A1._A1Col(some as string, this._converter);\n      return 0;\n    };\n\n    /**\n     * Define start range\n     */\n\n    // From a1Start\n    if(isValidA1(a1Start))\n    {\n      const a1StartParsed = A1._parse(a1Start, this._converter);\n      cs = a1StartParsed.cs;\n      rs = a1StartParsed.rs;\n      const equalCol = a1StartParsed.cs === a1StartParsed.ce,\n            equalRow = a1StartParsed.rs === a1StartParsed.re,\n            equal    = equalCol && equalRow;\n      if(!equal || (equal && a1Start.includes(':')))\n      {\n        ce = a1StartParsed.ce;\n        re = a1StartParsed.re;\n      }\n    }\n\n    // From colStart & rowStart\n    if(!cs && colStart)\n      cs = getValue(colStart);\n    if(!rs && rowStart)\n      rs = getValue(rowStart, false);\n\n    /**\n     * Define end range\n     */\n\n    // From a1End\n    if(!ce && !re && isValidA1(a1End))\n    {\n      const a1EndParsed = A1._parse(a1End, this._converter);\n      ce = a1EndParsed.ce;\n      re = a1EndParsed.re;\n    }\n\n    // From colEnd & rowEnd\n    if(!ce && colEnd)\n      ce = getValue(colEnd);\n    if(!re && rowEnd)\n      re = getValue(rowEnd, false);\n\n    // From nCols & nRows\n    if(!ce && cs && isPositiveNumber(nCols))\n      ce = cs + nCols - 1;\n    if(!re && rs && isPositiveNumber(nRows))\n      re = rs + nRows - 1;\n\n    /**\n     * If only start/end range was defined\n     */\n    (cs && !ce) && (ce = cs);\n    (!cs && ce) && (cs = ce);\n    (rs && !re) && (re = rs);\n    (!rs && re) && (rs = re);\n\n    /**\n     * Check results\n     */\n    if(!cs || !rs || !ce || !re)\n      throw new A1Error(options).wasUnknown();\n\n    /**\n     * Set ranges\n     */\n    this._colStart = cs;\n    this._rowStart = rs;\n    this._colEnd   = ce;\n    this._rowEnd   = re;\n  }\n\n  /**\n   *\tIt handles cases:\n   *\tconstructor(col: number, row: number)\n   *\tconstructor(col: number, row: number, nRows: number)\n   *\tconstructor(col: number, row: number, nRows: number, nCols: number)\n   *\t@param {number[]} args\n   */\n  private _initNumber(...args: number[]): void\n  {\n    let [col, row, nRows, nCols] = args;\n    nRows = nRows || 1;\n    nCols = nCols || 1;\n    let all = [col, row, nRows, nCols];\n    if(!all.every(n => isPositiveNumber(n)))\n      throw new A1Error(all.join(', ')).wasNumber();\n    this._colStart \t= col;\t\t\t\t// the first col\n    this._rowStart \t= row;\t\t\t\t// the first row\n    this._colEnd \t= col + nCols - 1;\t// how many cols in total (cols length)\n    this._rowEnd \t= row + nRows - 1;\t// how many rows in total (rows length)\n  }\n\n  /**\n   *\tIt handles cases:\n   *\tconstructor(range: string)\n   *\tconstructor(rangeStart: string, rangeEnd: string)\n   *\t@param {string[]} args\n   */\n  private _initString(...args: string[]): void\n  {\n    const [rangeStart, rangeEnd] = args;\n    const range = rangeEnd\n      ? `${rangeStart}:${rangeEnd}`// rangeStart: string, rangeEnd: string\n      : rangeStart;                // range: string\n    if(!isValidA1(range))\n      throw new A1Error(range).wasString();\n    const {cs, rs, ce, re} = A1._parse(range, this._converter);\n    this._colStart = cs;\n    this._rowStart = rs;\n    this._colEnd   = ce;\n    this._rowEnd   = re;\n  }\n\n  /**\n   *\tConstructor\n   */\n  constructor(object: options)\n  constructor(range: string)\n  constructor(rangeStart: string, rangeEnd: string)\n  constructor(col: number, row: number)\n  constructor(col: number, row: number, nRows: number)\n  constructor(col: number, row: number, nRows: number, nCols: number)\n  constructor(something: string | number | options, something2?: string | number, nRows?: number, nCols?: number)\n  {\n    // No arguments\n    if(!arguments.length)\n      throw new A1Error().wasUnknown();\n    // Object\n    if(something && type(something) === 'object')\n      this._initObject(something as options);\n    // Number\n    else if(isNumber(something))\n      this._initNumber.apply(this, arguments);\n    // String\n    else if(isString(something))\n      this._initString.apply(this, arguments);\n    // Unknown argument\n    else\n      throw new A1Error(something).wasUnknown();\n  }\n\n  /***********\n   *\tMETHODS\n   ***********/\n  /**\n   *\t@return {string} in A1 notation\n   */\n  get(): string\n  {\n    let start \t= colNumberToString(this._colStart)+rowNumberToString(this._rowStart),\n      end \t= colNumberToString(this._colEnd)+rowNumberToString(this._rowEnd);\n    return start === end ? start : `${start}:${end}`;\n  }\n  /**\n   *\t@return {string} in A1 notation\n   */\n  toString(): string\n  {\n    return this.get();\n  }\n  /**\n   *\t@typedef {Object} Result\n   *\t@property {number} colStart\n   *\t@property {number} rowStart\n   *\t@property {number} colEnd\n   *\t@property {number} rowEnd\n   *\t@property {string} a1\n   *\t@property {number} rowsCount\n   *\t@property {number} colsCount\n   *\n   *\t@return {Result} full information about range\n   */\n  toJSON(): {\n    colStart: \tnumber,\n    rowStart: \tnumber,\n    colEnd: \tnumber,\n    rowEnd: \tnumber,\n    a1: \t\tstring,\n    rowsCount: \tnumber,\n    colsCount: \tnumber,\n  }\n  {\n    return {\n      colStart: \tthis._colStart,\n      rowStart: \tthis._rowStart,\n      colEnd: \tthis._colEnd,\n      rowEnd: \tthis._rowEnd,\n      a1: \t\tthis.get(),\n      rowsCount: \tthis._rowEnd - this._rowStart + 1,\n      colsCount: \tthis._colEnd - this._colStart + 1,\n    }\n  }\n  /**\n   *\t@return {number} start column\n   */\n  getCol(): number\n  {\n    return this._colStart;\n  }\n  /**\n   *\t@return {number} end column\n   */\n  getLastCol(): number\n  {\n    return this._colEnd;\n  }\n  /**\n   *\t@return {number} start row\n   */\n  getRow(): number\n  {\n    return this._rowStart;\n  }\n  /**\n   *\t@return {number} end row\n   */\n  getLastRow(): number\n  {\n    return this._rowEnd;\n  }\n  /**\n   *\t@return {number} columns count\n   */\n  getWidth(): number\n  {\n    return this._colEnd - this._colStart + 1;\n  }\n  /**\n   *\t@return {number} rows count\n   */\n  getHeight(): number\n  {\n    return this._rowEnd - this._rowStart + 1;\n  }\n  /**\n   *\t@return {A1} copy of this object\n   */\n  copy(): A1\n  {\n    return new A1(this.get());\n  }\n  /**\n   *\tAdds N cells to range along the x-axis\n   *\tif count >= 0 - adds to right\n   *\tif count <  0 - adds to left\n   *\t@param {number} count\n   *\n   *\t@return {this}\n   */\n  addX(count: number): this\n  {\n    if(!isNumber(count))\n      throw new A1Error(count).wasUnknown();\n    count >= 0\n      ? this._colEnd \t += count\n      : this._colStart += count;\n    (this._colStart <= 0) && (this._colStart = 1);\n    return this;\n  }\n  /**\n   *\tAdds N cells to range along the y-axis\n   *\tif count >= 0 - adds to bottom\n   *\tif count <  0 - adds to top\n   *\t@param {number} count\n   *\n   *\t@return {this}\n   */\n  addY(count: number): this\n  {\n    if(!isNumber(count))\n      throw new A1Error(count).wasUnknown();\n    count >= 0\n      ? this._rowEnd \t += count\n      : this._rowStart += count;\n    (this._rowStart <= 0) && (this._rowStart = 1);\n    return this;\n  }\n  /**\n   *\tAdds N cells to range along the x/y-axis\n   *\t@param {number} countX\n   *\t@param {number} countY\n   *\n   *\t@return {this}\n   */\n  add(countX: number, countY: number): this\n  {\n    this.addX(countX);\n    this.addY(countY);\n    return this;\n  }\n  /**\n   *\tRemoves N cells from range along the x-axis\n   *\tif count >= 0 - removes from right\n   *\tif count <  0 - removes from left\n   *\t@param {number} count\n   *\n   *\t@return {this}\n   */\n  removeX(count: number): this\n  {\n    if(!isNumber(count))\n      throw new A1Error(count).wasUnknown();\n    if(count >= 0)\n    {\n      this._colEnd -= count;\n      (this._colEnd < this._colStart) && (this._colEnd = this._colStart);\n    }\n    else\n    {\n      this._colStart -= count;\n      (this._colStart > this._colEnd) && (this._colStart = this._colEnd);\n    }\n    return this;\n  }\n  /**\n   *\tRemoves N cells from range along the y-axis\n   *\tif count >= 0 - removes from bottom\n   *\tif count <  0 - removes from top\n   *\t@param {number} count\n   *\n   *\t@return {this}\n   */\n  removeY(count: number): this\n  {\n    if(!isNumber(count))\n      throw new A1Error(count).wasUnknown();\n    if(count >= 0)\n    {\n      this._rowEnd -= count;\n      (this._rowEnd < this._rowStart) && (this._rowEnd = this._rowStart);\n    }\n    else\n    {\n      this._rowStart -= count;\n      (this._rowStart > this._rowEnd) && (this._rowStart = this._rowEnd);\n    }\n    return this;\n  }\n  /**\n   *\tRemoves N cells from range along the x/y-axis\n   *\t@param {number} countX\n   *\t@param {number} countY\n   *\n   *\t@return {this}\n   */\n  remove(countX: number, countY: number): this\n  {\n    this.removeX(countX);\n    this.removeY(countY);\n    return this;\n  }\n  /**\n   *\tShifts the range along the x-axis\n   *\tIf offset >= 0 - shifts to right\n   *\tIf offset <  0 - shifts to left\n   *\t@param {number} offset\n   *\n   *\t@return {this}\n   */\n  shiftX(offset: number): this\n  {\n    if(!isNumber(offset))\n      throw new A1Error(offset).wasUnknown();\n    let diff \t= this._colEnd - this._colStart,\n      start \t= this._colStart + offset,\n      end \t= this._colEnd \t + offset;\n    this._colStart \t= start > 0 ? start : 1;\n    this._colEnd \t= start > 0 ? end \t: diff + 1;\n    return this;\n  }\n  /**\n   *\tShifts the range along the y-axis\n   *\tIf offset >= 0 - shifts to bottom\n   *\tIf offset <  0 - shifts to top\n   *\t@param {number} offset\n   *\n   *\t@return {this}\n   */\n  shiftY(offset: number): this\n  {\n    if(!isNumber(offset))\n      throw new A1Error(offset).wasUnknown();\n    let diff \t= this._rowEnd - this._rowStart,\n      start \t= this._rowStart + offset,\n      end \t= this._rowEnd \t + offset;\n    this._rowStart \t= start > 0 ? start : 1;\n    this._rowEnd \t= start > 0 ? end \t: diff + 1;\n    return this;\n  }\n  /**\n   *\tShifts the range along the x/y-axis\n   *\t@param {number} offsetX\n   *\t@param {number} offsetY\n   *\n   *\t@return {this}\n   */\n  shift(offsetX: number, offsetY: number): this\n  {\n    this.shiftX(offsetX);\n    this.shiftY(offsetY);\n    return this;\n  }\n}\n\nexport default A1;\n"],"names":["colNumberToString","col","temp","letter","String","fromCharCode","rowStringToNumber","row","parseInt","rowNumberToString","type","some","isString","isNumber","Number","isInteger","isPositiveNumber","isValidA1","test","A1Error","Error","[object Object]","something","str","JSON","stringify","super","this","name","message","A1","something2","nRows","nCols","arguments","length","wasUnknown","_initObject","_initNumber","apply","_initString","a1","converter","cs","rs","ce","re","toUpperCase","match","_reg","colStart","_A1Col","colEnd","rowStart","rowEnd","column","i","charCodeAt","Math","pow","colStringToNumber1","l","chr","sum","A","radix","colStringToNumber2","wasString","_parse","wasNumber","options","a1Start","a1End","_converter","getValue","canBeLetter","isStringifiedNumber","isLetter","a1StartParsed","equalCol","equalRow","equal","includes","a1EndParsed","_colStart","_rowStart","_colEnd","_rowEnd","args","all","every","n","join","rangeStart","rangeEnd","range","start","end","get","rowsCount","colsCount","count","countX","countY","addX","addY","removeX","removeY","offset","diff","offsetX","offsetY","shiftX","shiftY"],"mappings":"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"}