{"version":3,"file":"index.next.min.js","sources":["../src/converters.ts","../src/helpers.ts","../src/A1Error.ts","../src/index.ts"],"sourcesContent":["/**\n * @file Contains converters from string to number and vice versa\n */\n\n/**\n * Converts column letter to number\n * @author AdamL\n * @see https://stackoverflow.com/questions/21229180/convert-column-index-into-corresponding-column-letter\n * @param {string} col\n *\n * @returns {number}\n */\nexport const colStringToNumber1 = (col: string): number =>\n{\n  const length = col.length;\n  let column = 0;\n  for(let i = 0; i < length; i++)\n    column += (col.charCodeAt(i) - 64) * Math.pow(26, length - i - 1);\n  return column;\n}\n\n/**\n * Converts column letter to number\n * @author Flambino\n * @see https://codereview.stackexchange.com/questions/90112/a1notation-conversion-to-row-column-index\n * @param {string} col\n *\n * @returns {number}\n */\nexport const colStringToNumber2 = (col: string): number =>\n{\n  let i,\n      l,\n      chr,\n      sum   = 0,\n      A     = 'A'.charCodeAt(0),\n      radix = 'Z'.charCodeAt(0) - A + 1;\n  for(i = 0, l = col.length; i < l; i++)\n  {\n    chr = col.charCodeAt(i);\n    sum = sum * radix + chr - A + 1;\n  }\n  return sum;\n}\n\n/**\n * Converts column number to letter\n * @author AdamL\n * @see https://stackoverflow.com/questions/21229180/convert-column-index-into-corresponding-column-letter\n * @param {number} col\n *\n * @returns {string}\n */\nexport const colNumberToString = (col: number): string =>\n{\n  let letter = '',\n      temp;\n  while(col > 0)\n  {\n    temp   = (col - 1) % 26;\n    letter = String.fromCharCode(temp + 65) + letter;\n    col    = (col - temp - 1) / 26;\n  }\n  return letter;\n}\n\n/**\n * Converts row string to number\n * @param {string} row\n *\n * @returns {number}\n */\nexport const rowStringToNumber = (row: string): number => parseInt(row, 10);\n\n/**\n * Converts row number to string\n * @param {number} row\n *\n * @returns {string}\n */\nexport const rowNumberToString = (row: number): string => String(row);\n","/**\n * @file Contains secondary functions\n */\n\n/**\n * Returns the type of a value\n * @param {unknown} some\n *\n * @returns {string}\n */\nexport const type = (some: unknown): string => typeof some;\n\n/**\n * Checks if a value is a string\n * @param {unknown} some\n *\n * @returns {boolean}\n */\nexport const isString = (some: unknown): boolean => type(some) === 'string';\n\n/**\n * Checks if a value is a number\n * @param {unknown} some\n *\n * @returns {boolean}\n */\nexport const isNumber = (some: unknown): boolean => type(some) === 'number' && Number.isInteger(some);\n\n/**\n * Checks if a value is a positive number\n * @param {unknown} some\n *\n * @returns {boolean}\n */\nexport const isPositiveNumber = (some: unknown): boolean => isNumber(some) && some > 0;\n\n/**\n * Checks if a value is a stringified number like \"1\", \"2\", ...\n * @param {unknown} some\n *\n * @returns {boolean}\n */\nexport const isStringifiedNumber = (some: unknown): boolean => isString(some) && /^[0-9]+$/.test(some as string) && isNumber(+some);\n\n/**\n * Checks if a value is a letter between a-zA-Z\n * @param {unknown} some\n *\n * @returns {boolean}\n */\nexport const isLetter = (some: unknown): boolean => isString(some) && /^[a-z]+$/i.test(some as string);\n\n/**\n * Checks validation of A1 notation\n * @param {unknown} some\n *\n * @returns {boolean}\n */\nexport const isValidA1 = (some: unknown): boolean => isString(some) && /^[A-Z]+\\d+(:[A-Z]+\\d+)?$/i.test(some as string);\n","/**\n * @fileOverview A1 notation errors\n */\nexport default class A1Error<T> extends Error\n{\n\tconstructor(a1: string)\n\tconstructor(col: number)\n\tconstructor(row: number)\n\tconstructor(unknown?: T)\n\tconstructor(something?: string | number | T)\n\t{\n\t\tconst str = JSON.stringify(something);\n\t\tsuper(str);\n\t\tthis.name \t\t= 'A1Error';\n\t\tthis.message \t= str;\n\t}\n\n  /**\n   * Was string\n   */\n\ts(): A1Error<T>\n\t{\n\t\tthis.message = `Invalid A1 notation: ${this.message}`;\n\t\treturn this;\n\t}\n\n  /**\n   * Was number\n   */\n\tn(): A1Error<T>\n\t{\n\t\tthis.message = `Invalid A1 number(s): ${this.message}`;\n\t\treturn this;\n\t}\n\n  /**\n   * Was unknown\n   */\n\tu(): A1Error<T>\n\t{\n\t\tthis.message = `Invalid A1 argument(s): ${this.message}`;\n\t\treturn this;\n\t}\n}\n","/**\n * @file Math operations and converting in A1 notation\n * Supports A1 notation like \"A1\" and \"A1:B2\"\n * @author FLighter\n */\n\nimport {\n  colStringToNumber1,// converter 1\n  colStringToNumber2,// converter 2\n  colNumberToString,\n  rowStringToNumber,\n  rowNumberToString,\n} from './converters';\nimport {\n  type,\n  isString,\n  isNumber,\n  isPositiveNumber,\n  isStringifiedNumber,\n  isLetter,\n  isValidA1,\n} from './helpers';\nimport A1Error from './A1Error';\nimport options from './options';\n\nclass A1\n{\n  // Regular expression for parsing\n  private static _reg:RegExp = /^([A-Z]+)(\\d+)(?::([A-Z]+)(\\d+))?$/;\n\n  /**\n   *\tExample: A1:B2\n   */\n  private _colStart: number = 0;// A -> 1\n  private _rowStart: number = 0;// 1 -> 1\n  private _colEnd:   number = 0;// B -> 2\n  private _rowEnd:   number = 0;// 2 -> 2\n  private _converter: 1 | 2 = 1;// converter 1 | 2\n\n  /**\n   *\tParses A1 notation\n   *\t@param {string} a1\n   *\t@param {1 | 2}  converter\n   *\n   *\t@return {object} {cs: number, rs: number, ce: number, re: number}\n   */\n  private static _parse(a1: string, converter: 1 | 2): {cs: number, rs: number, ce: number, re: number}\n  {\n    let [\n        ,\n        cs,// col start // A\n        rs,// row start // 1\n        ce,// col end \t// B\n        re,// row end \t// 2\n      ] = a1.toUpperCase().match(this._reg);\n    ce = ce || cs;\n    re = re || rs;\n    const colStart = this._A1Col(cs, converter),\n          colEnd   = this._A1Col(ce, converter),\n          rowStart = rowStringToNumber(rs),\n          rowEnd   = rowStringToNumber(re);\n    // For non-standard A1\n    return {\n      cs: colEnd > colStart ? colStart : colEnd,\n      rs: rowEnd > rowStart ? rowStart : rowEnd,\n      ce: colEnd > colStart ? colEnd \t : colStart,\n      re: rowEnd > rowStart ? rowEnd \t : rowStart,\n    }\n  }\n\n  /**\n   *\tConverts column letter to number using converter 1 or 2\n   *\t@param {string} a1\n   *\t@param {1 | 2} converter\n   *\n   *\t@return {number}\n   */\n  private static _A1Col(a1: string, converter: 1 | 2): number\n  {\n    return converter === 1 ? colStringToNumber1(a1) : colStringToNumber2(a1);\n  }\n\n  /******************\n   * STATIC METHODS\n   ******************/\n\n  /**\n   *\tChecks A1 notation\n   *\t@param {string} a1\n   *\n   *\t@return {boolean}\n   */\n  static isValid(a1: string): boolean\n  {\n    return isValidA1(a1);\n  }\n\n  /**\n   *\tConverts the first column letter from A1 to number\n   *\t@param {string} a1\n   *\t@param {1 | 2} [converter = 1]\n   *\n   *\t@return {number}\n   */\n  static getCol(a1: string, converter: 1 | 2 = 1): number\n  {\n    if(!isValidA1(a1))\n      throw new A1Error(a1).s();\n    return this._parse(a1, converter).cs;\n  }\n\n  /**\n   *\tConverts the last column letter from A1 to number\n   *\t@param {string} a1\n   *\t@param {1 | 2} [converter = 1]\n   *\n   *\t@return {number}\n   */\n  static getLastCol(a1: string, converter: 1 | 2 = 1): number\n  {\n    if(!isValidA1(a1))\n      throw new A1Error(a1).s();\n    return this._parse(a1, converter).ce;\n  }\n\n  /**\n   *\tConverts number to column letter in A1\n   *\t@param {number} col\n   *\n   *\t@return {string}\n   */\n  static toCol(col: number): string\n  {\n    if(!isPositiveNumber(col))\n      throw new A1Error(col).n();\n    return colNumberToString(col);\n  }\n\n  /**\n   *\tConverts the first row string to number\n   *\t@param {string} a1\n   *\n   *\t@return {number}\n   */\n  static getRow(a1: string): number\n  {\n    if(!isValidA1(a1))\n      throw new A1Error(a1).s();\n    return this._parse(a1, 1).rs;\n  }\n\n  /**\n   *\tConverts the last row string to number\n   *\t@param {string} a1\n   *\n   *\t@return {number}\n   */\n  static getLastRow(a1: string): number\n  {\n    if(!isValidA1(a1))\n      throw new A1Error(a1).s();\n    return this._parse(a1, 1).re;\n  }\n\n  /**\n   *\tConverts number to row string in A1\n   *\t@param {number} row\n   *\n   *\t@return {string}\n   */\n  static toRow(row: number): string\n  {\n    if(!isPositiveNumber(row))\n      throw new A1Error(row).n();\n    return rowNumberToString(row);\n  }\n\n  /**\n   *\t@param {string} a1\n   *\t@param {1 | 2} [converter = 1]\n   *\n   *\t@return {number} columns count\n   */\n  static getWidth(a1: string, converter: 1 | 2 = 1): number\n  {\n    if(!isValidA1(a1))\n      throw new A1Error(a1).s();\n    let {ce, cs} = this._parse(a1, converter);\n    return ce - cs + 1;\n  }\n\n  /**\n   *\t@param {string} a1\n   *\n   *\t@return {number} rows count\n   */\n  static getHeight(a1: string): number\n  {\n    if(!isValidA1(a1))\n      throw new A1Error(a1).s();\n    let {re, rs} = this._parse(a1, 1);\n    return re - rs + 1;\n  }\n\n  /***************\n   * CONSTRUCTOR\n   ***************/\n\n  /**\n   *\tIt handles case:\n   *\tconstructor(object: options)\n   *\t@param {options} options\n   */\n  private _initObject(options: options): void\n  {\n    const {\n      a1Start,\n      a1End,\n      colStart,\n      colEnd,\n      rowStart,\n      rowEnd,\n      nCols,\n      nRows,\n      converter,\n    } = options;\n\n    // Set converter\n    this._converter = converter === 2 ? 2 : 1;\n\n    let cs: number,\n        ce: number,\n        rs: number,\n        re: number;\n\n    const getValue = (some: unknown, canBeLetter: boolean = true): number =>\n    {\n      if(isPositiveNumber(some) || isStringifiedNumber(some))\n        return +some;\n      if(canBeLetter && isLetter(some))\n        return A1._A1Col(some as string, this._converter);\n      return 0;\n    };\n\n    /**\n     * Define start range\n     */\n\n    // From a1Start\n    if(isValidA1(a1Start))\n    {\n      const a1StartParsed = A1._parse(a1Start, this._converter);\n      cs = a1StartParsed.cs;\n      rs = a1StartParsed.rs;\n      const equalCol = a1StartParsed.cs === a1StartParsed.ce,\n            equalRow = a1StartParsed.rs === a1StartParsed.re,\n            equal    = equalCol && equalRow;\n      if(!equal || (equal && a1Start.includes(':')))\n      {\n        ce = a1StartParsed.ce;\n        re = a1StartParsed.re;\n      }\n    }\n\n    // From colStart & rowStart\n    if(!cs && colStart)\n      cs = getValue(colStart);\n    if(!rs && rowStart)\n      rs = getValue(rowStart, false);\n\n    /**\n     * Define end range\n     */\n\n    // From a1End\n    if(!ce && !re && isValidA1(a1End))\n    {\n      const a1EndParsed = A1._parse(a1End, this._converter);\n      ce = a1EndParsed.ce;\n      re = a1EndParsed.re;\n    }\n\n    // From colEnd & rowEnd\n    if(!ce && colEnd)\n      ce = getValue(colEnd);\n    if(!re && rowEnd)\n      re = getValue(rowEnd, false);\n\n    // From nCols & nRows\n    if(!ce && cs && isPositiveNumber(nCols))\n      ce = cs + nCols - 1;\n    if(!re && rs && isPositiveNumber(nRows))\n      re = rs + nRows - 1;\n\n    /**\n     * If only start/end range was defined\n     */\n    (cs && !ce) && (ce = cs);\n    (!cs && ce) && (cs = ce);\n    (rs && !re) && (re = rs);\n    (!rs && re) && (rs = re);\n\n    /**\n     * Check results\n     */\n    if(!cs || !rs || !ce || !re)\n      throw new A1Error(options).u();\n\n    /**\n     * Set ranges\n     */\n    this._colStart = cs;\n    this._rowStart = rs;\n    this._colEnd   = ce;\n    this._rowEnd   = re;\n  }\n\n  /**\n   *\tIt handles cases:\n   *\tconstructor(col: number, row: number)\n   *\tconstructor(col: number, row: number, nRows: number)\n   *\tconstructor(col: number, row: number, nRows: number, nCols: number)\n   *\t@param {number[]} args\n   */\n  private _initNumber(...args: number[]): void\n  {\n    let [col, row, nRows, nCols] = args;\n    nRows = nRows || 1;\n    nCols = nCols || 1;\n    let all = [col, row, nRows, nCols];\n    if(!all.every(n => isPositiveNumber(n)))\n      throw new A1Error(all.join(', ')).n();\n    this._colStart \t= col;\t\t\t\t// the first col\n    this._rowStart \t= row;\t\t\t\t// the first row\n    this._colEnd \t= col + nCols - 1;\t// how many cols in total (cols length)\n    this._rowEnd \t= row + nRows - 1;\t// how many rows in total (rows length)\n  }\n\n  /**\n   *\tIt handles cases:\n   *\tconstructor(range: string)\n   *\tconstructor(rangeStart: string, rangeEnd: string)\n   *\t@param {string[]} args\n   */\n  private _initString(...args: string[]): void\n  {\n    const [rangeStart, rangeEnd] = args;\n    const range = rangeEnd\n      ? `${rangeStart}:${rangeEnd}`// rangeStart: string, rangeEnd: string\n      : rangeStart;                // range: string\n    if(!isValidA1(range))\n      throw new A1Error(range).s();\n    const {cs, rs, ce, re} = A1._parse(range, this._converter);\n    this._colStart = cs;\n    this._rowStart = rs;\n    this._colEnd   = ce;\n    this._rowEnd   = re;\n  }\n\n  /**\n   * Constructor\n   */\n  constructor(object: options)\n  constructor(range: string)\n  constructor(rangeStart: string, rangeEnd: string)\n  constructor(col: number, row: number)\n  constructor(col: number, row: number, nRows: number)\n  constructor(col: number, row: number, nRows: number, nCols: number)\n  constructor(something: string | number | options, something2?: string | number, nRows?: number, nCols?: number)\n  {\n    // No arguments\n    if(!arguments.length)\n      throw new A1Error().u();\n    // Object\n    if(something && type(something) === 'object')\n      this._initObject(something as options);\n    // Number\n    else if(isNumber(something))\n      this._initNumber.apply(this, arguments);\n    // String\n    else if(isString(something))\n      this._initString.apply(this, arguments);\n    // Unknown argument\n    else\n      throw new A1Error(something).u();\n  }\n\n  /***********\n   * METHODS\n   ***********/\n\n  /**\n   *\t@return {string} in A1 notation\n   */\n  get(): string\n  {\n    const start = colNumberToString(this._colStart)+rowNumberToString(this._rowStart),\n          end   = colNumberToString(this._colEnd)+rowNumberToString(this._rowEnd);\n    return start === end ? start : `${start}:${end}`;\n  }\n\n  /**\n   *\t@return {string} in A1 notation\n   */\n  toString(): string\n  {\n    return this.get();\n  }\n\n  /**\n   *\t@typedef {Object} Result\n   *\t@property {number} colStart\n   *\t@property {number} rowStart\n   *\t@property {number} colEnd\n   *\t@property {number} rowEnd\n   *\t@property {string} a1\n   *\t@property {number} rowsCount\n   *\t@property {number} colsCount\n   *\n   *\t@return {Result} full information about the range\n   */\n  toJSON(): {\n    colStart:  number,\n    rowStart:  number,\n    colEnd:    number,\n    rowEnd:    number,\n    a1:        string,\n    rowsCount: number,\n    colsCount: number,\n  }\n  {\n    return {\n      colStart:  this._colStart,\n      rowStart:  this._rowStart,\n      colEnd:    this._colEnd,\n      rowEnd:    this._rowEnd,\n      a1:        this.get(),\n      rowsCount: this._rowEnd - this._rowStart + 1,\n      colsCount: this._colEnd - this._colStart + 1,\n    }\n  }\n\n  /**\n   *\t@return {number} start column\n   */\n  getCol(): number\n  {\n    return this._colStart;\n  }\n\n  /**\n   *\t@return {number} end column\n   */\n  getLastCol(): number\n  {\n    return this._colEnd;\n  }\n\n  /**\n   *\t@return {number} start row\n   */\n  getRow(): number\n  {\n    return this._rowStart;\n  }\n\n  /**\n   *\t@return {number} end row\n   */\n  getLastRow(): number\n  {\n    return this._rowEnd;\n  }\n\n  /**\n   *\t@return {number} columns count\n   */\n  getWidth(): number\n  {\n    return this._colEnd - this._colStart + 1;\n  }\n\n  /**\n   *\t@return {number} rows count\n   */\n  getHeight(): number\n  {\n    return this._rowEnd - this._rowStart + 1;\n  }\n\n  /**\n   *\t@return {A1} copy of this object\n   */\n  copy(): A1\n  {\n    return new A1(this.get());\n  }\n\n  /**\n   * Sets a value to the start column\n   * @param {string | number} val\n   *\n   * @returns {this}\n   */\n  setCol(val: string | number): this\n  {\n    return this._setFields(val, '_colStart');\n  }\n\n  /**\n   * Sets a value to the end column\n   * @param {string | number} val\n   *\n   * @returns {this}\n   */\n  setLastCol(val: string | number): this\n  {\n    return this._setFields(val, '_colEnd');\n  }\n\n  /**\n   * Sets a value to the start row\n   * @param {string | number} val\n   *\n   * @returns {this}\n   */\n  setRow(val: string | number): this\n  {\n    return this._setFields(val, '_rowStart', false);\n  }\n\n  /**\n   * Sets a value to the end row\n   * @param {string | number} val\n   *\n   * @returns {this}\n   */\n  setLastRow(val: string | number): this\n  {\n    return this._setFields(val, '_rowEnd', false);\n  }\n\n  /**\n   *\tAdds N cells to range along the x-axis\n   *\tif count >= 0 - adds to right\n   *\tif count <  0 - adds to left\n   *\t@param {number} count\n   *\n   *\t@return {this}\n   */\n  addX(count: number): this\n  {\n    return this._addFields(count, '_colStart', '_colEnd');\n  }\n\n  /**\n   *\tAdds N cells to range along the y-axis\n   *\tif count >= 0 - adds to bottom\n   *\tif count <  0 - adds to top\n   *\t@param {number} count\n   *\n   *\t@return {this}\n   */\n  addY(count: number): this\n  {\n    return this._addFields(count, '_rowStart', '_rowEnd');\n  }\n\n  /**\n   *\tAdds N cells to range along the x/y-axis\n   *\t@param {number} countX\n   *\t@param {number} countY\n   *\n   *\t@return {this}\n   */\n  add(countX: number, countY: number): this\n  {\n    return this.addX(countX).addY(countY);\n  }\n\n  /**\n   *\tRemoves N cells from range along the x-axis\n   *\tif count >= 0 - removes from right\n   *\tif count <  0 - removes from left\n   *\t@param {number} count\n   *\n   *\t@return {this}\n   */\n  removeX(count: number): this\n  {\n    return this._removeFields(count, '_colStart', '_colEnd');\n  }\n\n  /**\n   *\tRemoves N cells from range along the y-axis\n   *\tif count >= 0 - removes from bottom\n   *\tif count <  0 - removes from top\n   *\t@param {number} count\n   *\n   *\t@return {this}\n   */\n  removeY(count: number): this\n  {\n    return this._removeFields(count, '_rowStart', '_rowEnd');\n  }\n\n  /**\n   *\tRemoves N cells from range along the x/y-axis\n   *\t@param {number} countX\n   *\t@param {number} countY\n   *\n   *\t@return {this}\n   */\n  remove(countX: number, countY: number): this\n  {\n    return this.removeX(countX).removeY(countY);\n  }\n\n  /**\n   *\tShifts the range along the x-axis\n   *\tIf offset >= 0 - shifts to right\n   *\tIf offset <  0 - shifts to left\n   *\t@param {number} offset\n   *\n   *\t@return {this}\n   */\n  shiftX(offset: number): this\n  {\n    return this._shiftFields(offset, '_colStart', '_colEnd');\n  }\n\n  /**\n   *\tShifts the range along the y-axis\n   *\tIf offset >= 0 - shifts to bottom\n   *\tIf offset <  0 - shifts to top\n   *\t@param {number} offset\n   *\n   *\t@return {this}\n   */\n  shiftY(offset: number): this\n  {\n    return this._shiftFields(offset, '_rowStart', '_rowEnd');\n  }\n\n  /**\n   *\tShifts the range along the x/y-axis\n   *\t@param {number} offsetX\n   *\t@param {number} offsetY\n   *\n   *\t@return {this}\n   */\n  shift(offsetX: number, offsetY: number): this\n  {\n    return this.shiftX(offsetX).shiftY(offsetY);\n  }\n\n  /**\n   * Sets a value to the specified field\n   * @param {string | number} val\n   * @param {string} field\n   * @param {boolean} [canBeLetter = true]\n   *\n   * @returns {this}\n   */\n  private _setFields(val: string | number, field: string, canBeLetter: boolean = true): this\n  {\n    if(isPositiveNumber(val) || isStringifiedNumber(val))\n      this[field] = +val;\n    else if(canBeLetter && isLetter(val))\n      this[field] = A1._A1Col(val as string, this._converter);\n    else\n      throw new A1Error(val).u();\n    return this;\n  }\n\n  /**\n   * Adds N cells to the range along the x/y-axis\n   * @param {number} count\n   * @param {string} fieldStart\n   * @param {string} fieldEnd\n   *\n   * @returns {this}\n   */\n  private _addFields(count: number, fieldStart: string, fieldEnd: string): this\n  {\n    if(!isNumber(count))\n      throw new A1Error(count).u();\n    count >= 0\n      ? this[fieldEnd]   += count\n      : this[fieldStart] += count;\n    (this[fieldStart] <= 0) && (this[fieldStart] = 1);\n    return this;\n  }\n\n  /**\n   * Removes N cells from the range along the x/y-axis\n   * @param {number} count\n   * @param {string} fieldStart\n   * @param {string} fieldEnd\n   *\n   * @returns {this}\n   */\n  private _removeFields(count: number, fieldStart: string, fieldEnd: string): this\n  {\n    if(!isNumber(count))\n      throw new A1Error(count).u();\n    if(count >= 0)\n    {\n      this[fieldEnd] -= count;\n      (this[fieldEnd] < this[fieldStart]) && (this[fieldEnd] = this[fieldStart]);\n    }\n    else\n    {\n      this[fieldStart] -= count;\n      (this[fieldStart] > this[fieldEnd]) && (this[fieldStart] = this[fieldEnd]);\n    }\n    return this;\n  }\n\n  /**\n   * Shifts the specified fields along x/y-axis\n   * @param {number} offset\n   * @param {string} fieldStart\n   * @param {string} fieldEnd\n   *\n   * @returns {this}\n   */\n  private _shiftFields(offset: number, fieldStart: string, fieldEnd: string): this\n  {\n    if(!isNumber(offset))\n      throw new A1Error(offset).u();\n    const diff  = this[fieldEnd] - this[fieldStart],\n          start = this[fieldStart] + offset,\n          end   = this[fieldEnd]   + offset;\n    this[fieldStart] = start > 0 ? start : 1;\n    this[fieldEnd]   = start > 0 ? end   : diff + 1;\n    return this;\n  }\n}\n\nexport default A1;\n"],"names":["colNumberToString","col","temp","letter","String","fromCharCode","rowStringToNumber","row","parseInt","rowNumberToString","type","some","isString","isNumber","Number","isInteger","isPositiveNumber","isStringifiedNumber","test","isLetter","isValidA1","A1Error","Error","[object Object]","something","str","JSON","stringify","super","this","name","message","A1","something2","nRows","nCols","arguments","length","u","_initObject","_initNumber","apply","_initString","a1","converter","cs","rs","ce","re","toUpperCase","match","_reg","colStart","_A1Col","colEnd","rowStart","rowEnd","column","i","charCodeAt","Math","pow","colStringToNumber1","l","chr","sum","A","radix","colStringToNumber2","s","_parse","n","options","a1Start","a1End","_converter","getValue","canBeLetter","a1StartParsed","equalCol","equalRow","equal","includes","a1EndParsed","_colStart","_rowStart","_colEnd","_rowEnd","args","all","every","join","rangeStart","rangeEnd","range","start","end","get","rowsCount","colsCount","val","_setFields","count","_addFields","countX","countY","addX","addY","_removeFields","removeX","removeY","offset","_shiftFields","offsetX","offsetY","shiftX","shiftY","field","fieldStart","fieldEnd","diff"],"mappings":"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"}