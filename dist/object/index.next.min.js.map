{"version":3,"file":"index.next.min.js","sources":["../../src/converters/A1-Row.ts","../../src/converters/Col-A1.ts","../../src/converters/Row-A1.ts","../../src/validation/isValidA1.ts","../../src/validation/isValidNumber.ts","../../src/validation/A1Error.ts","../../src/index.ts","../../src/converters/A1-Col-1.ts","../../src/converters/A1-Col-2.ts"],"sourcesContent":["/**\n *\t@fileOverview Converts row string to number\n *\t@param {string} row\n *\n *\t@return {number}\n */\nexport default function(row: string): number\n{\n\treturn parseInt(row, 10);\n}\n","/**\n *\t@fileOverview Converts column number to letter\n *\t@author AdamL\n *\t@see https://stackoverflow.com/questions/21229180/convert-column-index-into-corresponding-column-letter\n *\t@param {number} col\n *\n *\t@return {string}\n */\nexport default function(col: number): string\n{\n\tlet letter = '',\n\t\ttemp;\n\twhile(col > 0)\n\t{\n\t\ttemp \t= (col - 1) % 26;\n\t\tletter \t= String.fromCharCode(temp + 65) + letter;\n\t\tcol \t= (col - temp - 1) / 26;\n\t}\n\treturn letter;\n}\n","/**\n *\t@fileOverview Converts row number to string\n *\t@param {number} row\n *\n *\t@return {string}\n */\nexport default function(row: number): string\n{\n\treturn row.toString();\n}\n","/**\n *\t@fileOverview Checks validation\n *\t@param {string} a1\n *\n *\t@return {boolean}\n */\nexport default function(a1: string): boolean\n{\n\treturn /^[A-Z]+\\d+(:[A-Z]+\\d+)?$/i.test(a1);\n}\n","/**\n *\t@fileOverview Checks number validation\n *\t@param {T} n\n *\t@param {boolean} [positiveOnly = true]\n *\n *\t@return {boolean}\n */\nexport default function<T>(n: T, positiveOnly: boolean = true): boolean\n{\n\tconst isNumber = typeof n === 'number' && Number.isInteger(n);\n\treturn positiveOnly ? (isNumber && +n > 0) : isNumber;\n}\n","/**\n *\t@fileOverview A1 notation errors\n */\nexport default class A1Error<T> extends Error\n{\n\tconstructor(a1: string)\n\tconstructor(col: number)\n\tconstructor(row: number)\n\tconstructor(unknown?: T)\n\tconstructor(something?: string | number | T)\n\t{\n\t\tconst str = JSON.stringify(something);\n\t\tsuper(str);\n\t\tthis.name \t\t= 'A1Error';\n\t\tthis.message \t= str;\n\t}\n\n\twasString(): A1Error<T>\n\t{\n\t\tthis.message = `Invalid A1 notation: ${this.message}`;\n\t\treturn this;\n\t}\n\n\twasNumber(): A1Error<T>\n\t{\n\t\tthis.message = `Invalid A1 number(s): ${this.message}`;\n\t\treturn this;\n\t}\n\n\twasUnknown(): A1Error<T>\n\t{\n\t\tthis.message = `Invalid A1 argument(s): ${this.message}`;\n\t\treturn this;\n\t}\n}\n","/**\n *\t@fileOverview Math operations and converting in A1 notation\n *\tSupports A1 notation like \"A1\" and \"A1:B2\"\n *\t@author FLighter\n */\n\nimport A1Col1 \t\t\tfrom './converters/A1-Col-1';// converter 1\nimport A1Col2 \t\t\tfrom './converters/A1-Col-2';// converter 2\nimport A1Row \t\t\tfrom './converters/A1-Row';\nimport ColA1 \t\t\tfrom './converters/Col-A1';\nimport RowA1 \t\t\tfrom './converters/Row-A1';\nimport isValidA1 \t\tfrom './validation/isValidA1';\nimport isValidNumber \tfrom './validation/isValidNumber';\nimport A1Error \t\t\tfrom './validation/A1Error';\nimport options \t\t\tfrom './options/options';\n\nclass A1\n{\n  // Regular expression for parsing\n  private static _reg:RegExp = /^([A-Z]+)(\\d+)(?::([A-Z]+)(\\d+))?$/;\n  /**\n   *\tExample: A1:B2\n   */\n  private _colStart: \tnumber \t= 0;// A -> 1\n  private _rowStart: \tnumber \t= 0;// 1 -> 1\n  private _colEnd: \tnumber \t= 0;// B -> 2\n  private _rowEnd: \tnumber \t= 0;// 2 -> 2\n  private _converter: 1 | 2 \t= 1;// converter 1 | 2\n\n  /**\n   *\tParses A1 notation\n   *\t@param {string} a1\n   *\t@param {1 | 2}  converter\n   *\n   *\t@return {object} {cs: number, rs: number, ce: number, re: number}\n   */\n  private static _parse(a1: string, converter: 1 | 2): {cs: number, rs: number, ce: number, re: number}\n  {\n    let [\n        ,\n        cs,// col start // A\n        rs,// row start // 1\n        ce,// col end \t// B\n        re,// row end \t// 2\n      ] = a1.toUpperCase().match(this._reg);\n    ce = ce || cs;\n    re = re || rs;\n    const colStart = this._A1Col(cs, converter),\n          colEnd   = this._A1Col(ce, converter),\n          rowStart = A1Row(rs),\n          rowEnd   = A1Row(re);\n    // For non-standard A1\n    return {\n      cs: colEnd > colStart ? colStart : colEnd,\n      rs: rowEnd > rowStart ? rowStart : rowEnd,\n      ce: colEnd > colStart ? colEnd \t : colStart,\n      re: rowEnd > rowStart ? rowEnd \t : rowStart,\n    }\n  }\n  /**\n   *\tConverts column letter to number using converter 1 or 2\n   *\t@param {string} a1\n   *\t@param {1 | 2} converter\n   *\n   *\t@return {number}\n   */\n  private static _A1Col(a1: string, converter: 1 | 2): number\n  {\n    return converter === 1 ? A1Col1(a1) : A1Col2(a1);\n  }\n\n  /******************\n   *\tSTATIC METHODS\n   ******************/\n  /**\n   *\tChecks A1 notation\n   *\t@param {string} a1\n   *\n   *\t@return {boolean}\n   */\n  static isValid(a1: string): boolean\n  {\n    return isValidA1(a1);\n  }\n  /**\n   *\tConverts the first column letter from A1 to number\n   *\t@param {string} a1\n   *\t@param {1 | 2} [converter = 1]\n   *\n   *\t@return {number}\n   */\n  static getCol(a1: string, converter: 1 | 2 = 1): number\n  {\n    if(!isValidA1(a1))\n      throw new A1Error(a1).wasString();\n    return this._parse(a1, converter).cs;\n  }\n  /**\n   *\tConverts the last column letter from A1 to number\n   *\t@param {string} a1\n   *\t@param {1 | 2} [converter = 1]\n   *\n   *\t@return {number}\n   */\n  static getLastCol(a1: string, converter: 1 | 2 = 1): number\n  {\n    if(!isValidA1(a1))\n      throw new A1Error(a1).wasString();\n    return this._parse(a1, converter).ce;\n  }\n  /**\n   *\tConverts number to column letter in A1\n   *\t@param {number} col\n   *\n   *\t@return {string}\n   */\n  static toCol(col: number): string\n  {\n    if(!isValidNumber(col))\n      throw new A1Error(col).wasNumber();\n    return ColA1(col);\n  }\n  /**\n   *\tConverts the first row string to number\n   *\t@param {string} a1\n   *\n   *\t@return {number}\n   */\n  static getRow(a1: string): number\n  {\n    if(!isValidA1(a1))\n      throw new A1Error(a1).wasString();\n    return this._parse(a1, 1).rs;\n  }\n  /**\n   *\tConverts the last row string to number\n   *\t@param {string} a1\n   *\n   *\t@return {number}\n   */\n  static getLastRow(a1: string): number\n  {\n    if(!isValidA1(a1))\n      throw new A1Error(a1).wasString();\n    return this._parse(a1, 1).re;\n  }\n  /**\n   *\tConverts number to row string in A1\n   *\t@param {number} row\n   *\n   *\t@return {string}\n   */\n  static toRow(row: number): string\n  {\n    if(!isValidNumber(row))\n      throw new A1Error(row).wasNumber();\n    return RowA1(row);\n  }\n  /**\n   *\t@param {string} a1\n   *\t@param {1 | 2} [converter = 1]\n   *\n   *\t@return {number} columns count\n   */\n  static getWidth(a1: string, converter: 1 | 2 = 1): number\n  {\n    if(!isValidA1(a1))\n      throw new A1Error(a1).wasString();\n    let {ce, cs} = this._parse(a1, converter);\n    return ce - cs + 1;\n  }\n  /**\n   *\t@param {string} a1\n   *\n   *\t@return {number} rows count\n   */\n  static getHeight(a1: string): number\n  {\n    if(!isValidA1(a1))\n      throw new A1Error(a1).wasString();\n    let {re, rs} = this._parse(a1, 1);\n    return re - rs + 1;\n  }\n\n  /***************\n   *\tCONSTRUCTOR\n   ***************/\n\n  /**\n   *\tIt handles case:\n   *\tconstructor(object: options)\n   *\t@param {options} options\n   */\n  private _initObject(options: options): void\n  {\n    const isString = <T>(some: T) => typeof some === 'string';\n    const isNumber = isValidNumber;\n    const isLetter    = (some: string) => /^[a-z]+$/i.test(some);\n    const isStrNumber = <T>(some: T) => typeof some === 'string' ? /^[0-9]+$/.test(some) : false;\n    const isStringifiedNumber = <T>(some: T) => isStrNumber(some) && isNumber(+some);\n\n    const {\n      a1Start,\n      a1End,\n      colStart,\n      colEnd,\n      rowStart,\n      rowEnd,\n      nCols,\n      nRows,\n      converter,\n    } = options;\n\n    // Set converter\n    this._converter = converter === 2 ? 2 : 1;\n\n    let cs: number,\n        ce: number,\n        rs: number,\n        re: number;\n\n    /**\n     * Define start range\n     */\n\n    // From a1Start\n    if(isString(a1Start) && isValidA1(a1Start))\n    {\n      const a1StartParsed = A1._parse(a1Start, this._converter);\n      cs = a1StartParsed.cs;\n      rs = a1StartParsed.rs;\n      const equalCol = a1StartParsed.cs === a1StartParsed.ce,\n            equalRow = a1StartParsed.rs === a1StartParsed.re,\n            equal    = equalCol && equalRow;\n      if(!equal || (equal && a1Start.includes(':')))\n      {\n        ce = a1StartParsed.ce;\n        re = a1StartParsed.re;\n      }\n    }\n\n    // From colStart\n    if(!cs && colStart)\n    {\n      if(isNumber(colStart))\n        cs = colStart as number;\n      else if(isString(colStart))\n      {\n        if(isLetter(colStart as string))\n          cs = A1._A1Col(colStart as string, this._converter);\n        else if(isStringifiedNumber(colStart))\n          cs = +colStart;\n      }\n    }\n\n    // From rowStart\n    if(!rs && (isNumber(rowStart) || isStringifiedNumber(rowStart)))\n      rs = +rowStart;\n\n    /**\n     * Define end range\n     */\n\n    // From a1End\n    if(!ce && !re && isString(a1End) && isValidA1(a1End))\n    {\n      const a1EndParsed = A1._parse(a1End, this._converter);\n      ce = a1EndParsed.ce;\n      re = a1EndParsed.re;\n    }\n\n    // From colEnd\n    if(!ce && colEnd)\n    {\n      if(isNumber(colEnd))\n        ce = colEnd as number;\n      else if(isString(colEnd))\n      {\n        if(isLetter(colEnd as string))\n          ce = A1._A1Col(colEnd as string, this._converter);\n        else if(isStringifiedNumber(colEnd))\n          ce = +colEnd;\n      }\n    }\n\n    // From rowEnd\n    if(!re && (isNumber(rowEnd) || isStringifiedNumber(rowEnd)))\n      re = +rowEnd;\n\n    // From nCols\n    if(!ce && cs && isNumber(nCols))\n      ce = cs + nCols - 1;\n\n    // From nRows\n    if(!re && rs && isNumber(nRows))\n      re = rs + nRows - 1;\n    \n    /**\n     * If only start/end range was defined\n     */\n    (cs && !ce) && (ce = cs);\n    (!cs && ce) && (cs = ce);\n    (rs && !re) && (re = rs);\n    (!rs && re) && (rs = re);\n\n    /**\n     * Check results\n     */\n    if(!cs || !rs || !ce || !re)\n      throw new A1Error(options).wasUnknown();\n\n    /**\n     * Set ranges\n     */\n    this._colStart = cs;\n    this._rowStart = rs;\n    this._colEnd   = ce;\n    this._rowEnd   = re;\n  }\n\n  /**\n   *\tIt handles cases:\n   *\tconstructor(col: number, row: number)\n   *\tconstructor(col: number, row: number, nRows: number)\n   *\tconstructor(col: number, row: number, nRows: number, nCols: number)\n   *\t@param {number[]} args\n   */\n  private _initNumber(...args: number[]): void\n  {\n    let [col, row, nRows, nCols] = args;\n    nRows = nRows || 1;\n    nCols = nCols || 1;\n    let all = [col, row, nRows, nCols];\n    if(!all.every(n => isValidNumber(n)))\n      throw new A1Error(all.join(', ')).wasNumber();\n    this._colStart \t= col;\t\t\t\t// the first col\n    this._rowStart \t= row;\t\t\t\t// the first row\n    this._colEnd \t= col + nCols - 1;\t// how many cols in total (cols length)\n    this._rowEnd \t= row + nRows - 1;\t// how many rows in total (rows length)\n  }\n\n  /**\n   *\tIt handles cases:\n   *\tconstructor(range: string)\n   *\tconstructor(rangeStart: string, rangeEnd: string)\n   *\t@param {string[]} args\n   */\n  private _initString(...args: string[]): void\n  {\n    const [rangeStart, rangeEnd] = args;\n    const range = rangeEnd\n      ? `${rangeStart}:${rangeEnd}`// rangeStart: string, rangeEnd: string\n      : rangeStart;                // range: string\n    if(!isValidA1(range))\n      throw new A1Error(range).wasString();\n    const {cs, rs, ce, re} = A1._parse(range, this._converter);\n    this._colStart = cs;\n    this._rowStart = rs;\n    this._colEnd   = ce;\n    this._rowEnd   = re;\n  }\n\n  /**\n   *\tConstructor\n   */\n  constructor(object: options)\n  constructor(range: string)\n  constructor(rangeStart: string, rangeEnd: string)\n  constructor(col: number, row: number)\n  constructor(col: number, row: number, nRows: number)\n  constructor(col: number, row: number, nRows: number, nCols: number)\n  constructor(something: string | number | options, something2?: string | number, nRows?: number, nCols?: number)\n  {\n    // No arguments\n    if(!arguments.length)\n      throw new A1Error().wasUnknown();\n    const type = typeof something;\n    // Object\n    if(something && type === 'object')\n      this._initObject(something as options);\n    // Number\n    else if(type === 'number')\n      this._initNumber.apply(this, arguments);\n    // String\n    else if(type === 'string')\n      this._initString.apply(this, arguments);\n    // Unknown argument\n    else\n      throw new A1Error(something).wasUnknown();\n  }\n\n  /***********\n   *\tMETHODS\n   ***********/\n  /**\n   *\t@return {string} in A1 notation\n   */\n  get(): string\n  {\n    let start \t= ColA1(this._colStart)+RowA1(this._rowStart),\n      end \t= ColA1(this._colEnd)+RowA1(this._rowEnd);\n    return start === end ? start : `${start}:${end}`;\n  }\n  /**\n   *\t@return {string} in A1 notation\n   */\n  toString(): string\n  {\n    return this.get();\n  }\n  /**\n   *\t@typedef {Object} Result\n   *\t@property {number} colStart\n   *\t@property {number} rowStart\n   *\t@property {number} colEnd\n   *\t@property {number} rowEnd\n   *\t@property {string} a1\n   *\t@property {number} rowsCount\n   *\t@property {number} colsCount\n   *\n   *\t@return {Result} full information about range\n   */\n  toJSON(): {\n    colStart: \tnumber,\n    rowStart: \tnumber,\n    colEnd: \tnumber,\n    rowEnd: \tnumber,\n    a1: \t\tstring,\n    rowsCount: \tnumber,\n    colsCount: \tnumber,\n  }\n  {\n    return {\n      colStart: \tthis._colStart,\n      rowStart: \tthis._rowStart,\n      colEnd: \tthis._colEnd,\n      rowEnd: \tthis._rowEnd,\n      a1: \t\tthis.get(),\n      rowsCount: \tthis._rowEnd - this._rowStart + 1,\n      colsCount: \tthis._colEnd - this._colStart + 1,\n    }\n  }\n  /**\n   *\t@return {number} start column\n   */\n  getCol(): number\n  {\n    return this._colStart;\n  }\n  /**\n   *\t@return {number} end column\n   */\n  getLastCol(): number\n  {\n    return this._colEnd;\n  }\n  /**\n   *\t@return {number} start row\n   */\n  getRow(): number\n  {\n    return this._rowStart;\n  }\n  /**\n   *\t@return {number} end row\n   */\n  getLastRow(): number\n  {\n    return this._rowEnd;\n  }\n  /**\n   *\t@return {number} columns count\n   */\n  getWidth(): number\n  {\n    return this._colEnd - this._colStart + 1;\n  }\n  /**\n   *\t@return {number} rows count\n   */\n  getHeight(): number\n  {\n    return this._rowEnd - this._rowStart + 1;\n  }\n  /**\n   *\t@return {A1} copy of this object\n   */\n  copy(): A1\n  {\n    return new A1(this.get());\n  }\n  /**\n   *\tAdds N cells to range along the x-axis\n   *\tif count >= 0 - adds to right\n   *\tif count <  0 - adds to left\n   *\t@param {number} count\n   *\n   *\t@return {this}\n   */\n  addX(count: number): this\n  {\n    if(!isValidNumber(count, false))\n      throw new A1Error(count).wasUnknown();\n    count >= 0\n      ? this._colEnd \t += count\n      : this._colStart += count;\n    (this._colStart <= 0) && (this._colStart = 1);\n    return this;\n  }\n  /**\n   *\tAdds N cells to range along the y-axis\n   *\tif count >= 0 - adds to bottom\n   *\tif count <  0 - adds to top\n   *\t@param {number} count\n   *\n   *\t@return {this}\n   */\n  addY(count: number): this\n  {\n    if(!isValidNumber(count, false))\n      throw new A1Error(count).wasUnknown();\n    count >= 0\n      ? this._rowEnd \t += count\n      : this._rowStart += count;\n    (this._rowStart <= 0) && (this._rowStart = 1);\n    return this;\n  }\n  /**\n   *\tAdds N cells to range along the x/y-axis\n   *\t@param {number} countX\n   *\t@param {number} countY\n   *\n   *\t@return {this}\n   */\n  add(countX: number, countY: number): this\n  {\n    this.addX(countX);\n    this.addY(countY);\n    return this;\n  }\n  /**\n   *\tRemoves N cells from range along the x-axis\n   *\tif count >= 0 - removes from right\n   *\tif count <  0 - removes from left\n   *\t@param {number} count\n   *\n   *\t@return {this}\n   */\n  removeX(count: number): this\n  {\n    if(!isValidNumber(count, false))\n      throw new A1Error(count).wasUnknown();\n    if(count >= 0)\n    {\n      this._colEnd -= count;\n      (this._colEnd < this._colStart) && (this._colEnd = this._colStart);\n    }\n    else\n    {\n      this._colStart -= count;\n      (this._colStart > this._colEnd) && (this._colStart = this._colEnd);\n    }\n    return this;\n  }\n  /**\n   *\tRemoves N cells from range along the y-axis\n   *\tif count >= 0 - removes from bottom\n   *\tif count <  0 - removes from top\n   *\t@param {number} count\n   *\n   *\t@return {this}\n   */\n  removeY(count: number): this\n  {\n    if(!isValidNumber(count, false))\n      throw new A1Error(count).wasUnknown();\n    if(count >= 0)\n    {\n      this._rowEnd -= count;\n      (this._rowEnd < this._rowStart) && (this._rowEnd = this._rowStart);\n    }\n    else\n    {\n      this._rowStart -= count;\n      (this._rowStart > this._rowEnd) && (this._rowStart = this._rowEnd);\n    }\n    return this;\n  }\n  /**\n   *\tRemoves N cells from range along the x/y-axis\n   *\t@param {number} countX\n   *\t@param {number} countY\n   *\n   *\t@return {this}\n   */\n  remove(countX: number, countY: number): this\n  {\n    this.removeX(countX);\n    this.removeY(countY);\n    return this;\n  }\n  /**\n   *\tShifts the range along the x-axis\n   *\tIf offset >= 0 - shifts to right\n   *\tIf offset <  0 - shifts to left\n   *\t@param {number} offset\n   *\n   *\t@return {this}\n   */\n  shiftX(offset: number): this\n  {\n    if(!isValidNumber(offset, false))\n      throw new A1Error(offset).wasUnknown();\n    let diff \t= this._colEnd - this._colStart,\n      start \t= this._colStart + offset,\n      end \t= this._colEnd \t + offset;\n    this._colStart \t= start > 0 ? start : 1;\n    this._colEnd \t= start > 0 ? end \t: diff + 1;\n    return this;\n  }\n  /**\n   *\tShifts the range along the y-axis\n   *\tIf offset >= 0 - shifts to bottom\n   *\tIf offset <  0 - shifts to top\n   *\t@param {number} offset\n   *\n   *\t@return {this}\n   */\n  shiftY(offset: number): this\n  {\n    if(!isValidNumber(offset, false))\n      throw new A1Error(offset).wasUnknown();\n    let diff \t= this._rowEnd - this._rowStart,\n      start \t= this._rowStart + offset,\n      end \t= this._rowEnd \t + offset;\n    this._rowStart \t= start > 0 ? start : 1;\n    this._rowEnd \t= start > 0 ? end \t: diff + 1;\n    return this;\n  }\n  /**\n   *\tShifts the range along the x/y-axis\n   *\t@param {number} offsetX\n   *\t@param {number} offsetY\n   *\n   *\t@return {this}\n   */\n  shift(offsetX: number, offsetY: number): this\n  {\n    this.shiftX(offsetX);\n    this.shiftY(offsetY);\n    return this;\n  }\n}\n\nexport default A1;\n","/**\n *\t@fileOverview Converts column letter to number\n *\t@author AdamL\n *\t@see https://stackoverflow.com/questions/21229180/convert-column-index-into-corresponding-column-letter\n *\t@param {string} col\n *\n *\t@return {number}\n */\nexport default function(col: string): number\n{\n\tlet column = 0,\n\t\tlength = col.length;\n\tfor(let i = 0; i < length; i++)\n\t\tcolumn += (col.charCodeAt(i) - 64) * Math.pow(26, length - i - 1);\n\treturn column;\n}\n","/**\n *\t@fileOverview Converts column letter to number\n *\t@author Flambino\n *\t@see https://codereview.stackexchange.com/questions/90112/a1notation-conversion-to-row-column-index\n *\t@param {string} col\n *\n *\t@return {number}\n */\nexport default function(col: string): number\n{\n\tlet i,\n\t\tl,\n\t\tchr,\n\t\tsum \t= 0,\n\t\tA \t\t= 'A'.charCodeAt(0),\n\t\tradix \t= 'Z'.charCodeAt(0) - A + 1;\n\tfor(i = 0, l = col.length; i < l; i++)\n\t{\n\t\tchr = col.charCodeAt(i);\n\t\tsum = sum * radix + chr - A + 1;\n\t}\n\treturn sum;\n}\n"],"names":["row","parseInt","col","temp","letter","String","fromCharCode","toString","a1","test","n","positiveOnly","isNumber","Number","isInteger","A1Error","Error","[object Object]","something","str","JSON","stringify","super","this","name","message","A1","something2","nRows","nCols","arguments","length","wasUnknown","type","_initObject","_initNumber","apply","_initString","converter","cs","rs","ce","re","toUpperCase","match","_reg","colStart","_A1Col","colEnd","rowStart","A1Row","rowEnd","column","i","charCodeAt","Math","pow","A1Col1","l","chr","sum","A","radix","A1Col2","isValidA1","wasString","_parse","isValidNumber","wasNumber","ColA1","RowA1","options","isString","some","isLetter","isStringifiedNumber","isStrNumber","a1Start","a1End","_converter","a1StartParsed","equalCol","equalRow","equal","includes","a1EndParsed","_colStart","_rowStart","_colEnd","_rowEnd","args","all","every","join","rangeStart","rangeEnd","range","start","end","get","rowsCount","colsCount","count","countX","countY","addX","addY","removeX","removeY","offset","diff","offsetX","offsetY","shiftX","shiftY"],"mappings":"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"}