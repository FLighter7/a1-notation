{"version":3,"file":"index.next.js","sources":["../../src/converters/A1-Col-1.ts","../../src/converters/A1-Col-2.ts","../../src/converters/A1-Row.ts","../../src/converters/Col-A1.ts","../../src/converters/Row-A1.ts","../../src/validation/isValidA1.ts","../../src/validation/isValidNumber.ts","../../src/validation/A1Error.ts","../../src/index.ts"],"sourcesContent":["/**\r\n *\t@fileOverview Converts column letter to number\r\n *\t@author AdamL\r\n *\t@see https://stackoverflow.com/questions/21229180/convert-column-index-into-corresponding-column-letter\r\n *\t@param {string} col\r\n *\r\n *\t@return {number}\r\n */\r\nexport default function(col: string): number\r\n{\r\n\tlet column = 0,\r\n\t\tlength = col.length;\r\n\tfor(let i = 0; i < length; i++)\r\n\t\tcolumn += (col.charCodeAt(i) - 64) * Math.pow(26, length - i - 1);\r\n\treturn column;\r\n}","/**\r\n *\t@fileOverview Converts column letter to number\r\n *\t@author Flambino\r\n *\t@see https://codereview.stackexchange.com/questions/90112/a1notation-conversion-to-row-column-index\r\n *\t@param {string} col\r\n *\r\n *\t@return {number}\r\n */\r\nexport default function(col: string): number\r\n{\r\n\tlet i,\r\n\t\tl,\r\n\t\tchr,\r\n\t\tsum \t= 0,\r\n\t\tA \t\t= 'A'.charCodeAt(0),\r\n\t\tradix \t= 'Z'.charCodeAt(0) - A + 1;\r\n\tfor(i = 0, l = col.length; i < l; i++)\r\n\t{\r\n\t\tchr = col.charCodeAt(i);\r\n\t\tsum = sum * radix + chr - A + 1;\r\n\t}\r\n\treturn sum;\r\n}","/**\r\n *\t@fileOverview Converts row string to number\r\n *\t@param {string} row\r\n *\r\n *\t@return {number}\r\n */\r\nexport default function(row: string): number\r\n{\r\n\treturn parseInt(row, 10);\r\n}","/**\r\n *\t@fileOverview Converts column number to letter\r\n *\t@author AdamL\r\n *\t@see https://stackoverflow.com/questions/21229180/convert-column-index-into-corresponding-column-letter\r\n *\t@param {number} col\r\n *\r\n *\t@return {string}\r\n */\r\nexport default function(col: number): string\r\n{\r\n\tlet letter = '',\r\n\t\ttemp;\r\n\twhile(col > 0)\r\n\t{\r\n\t\ttemp \t= (col - 1) % 26;\r\n\t\tletter \t= String.fromCharCode(temp + 65) + letter;\r\n\t\tcol \t= (col - temp - 1) / 26;\r\n\t}\r\n\treturn letter;\r\n}","/**\r\n *\t@fileOverview Converts row number to string\r\n *\t@param {number} row\r\n *\r\n *\t@return {string}\r\n */\r\nexport default function(row: number): string\r\n{\r\n\treturn row.toString();\r\n}","/**\r\n *\t@fileOverview Checks validation\r\n *\t@param {string} a1\r\n *\r\n *\t@return {boolean}\r\n */\r\nexport default function(a1: string): boolean\r\n{\r\n\treturn /^[A-Z]+\\d+(:[A-Z]+\\d+)?$/i.test(a1);\r\n}","/**\r\n *\t@fileOverview Checks number validation\r\n *\t@param {T} n\r\n *\t@param {boolean} [strict = true]\r\n *\r\n *\t@return {boolean}\r\n */\r\nexport default function<T>(n: T, strict: boolean = true): boolean\r\n{\r\n\tlet isNumber = typeof n === 'number' && Number.isInteger(n);\r\n\treturn strict ? (isNumber && +n > 0) : isNumber;\r\n}","/**\r\n *\t@fileOverview A1 notation errors\r\n */\r\nexport default class A1Error<T> extends Error\r\n{\r\n\tconstructor(a1: string)\r\n\tconstructor(col: number)\r\n\tconstructor(row: number)\r\n\tconstructor(unknown?: T)\r\n\tconstructor(something?: string | number | T)\r\n\t{\r\n\t\tlet str = JSON.stringify(something);\r\n\t\tsuper(str);\r\n\t\tthis.name \t\t= 'A1Error';\r\n\t\tthis.message \t= str;\r\n\t}\r\n\r\n\twasString(): A1Error<T>\r\n\t{\r\n\t\tthis.message = `Invalid A1 notation: ${this.message}`;\r\n\t\treturn this;\r\n\t}\r\n\r\n\twasNumber(): A1Error<T>\r\n\t{\r\n\t\tthis.message = `Invalid A1 number(s): ${this.message}`;\r\n\t\treturn this;\r\n\t}\r\n\r\n\twasUnknown(): A1Error<T>\r\n\t{\r\n\t\tthis.message = `Invalid A1 argument(s): ${this.message}`;\r\n\t\treturn this;\r\n\t}\r\n}","/**\r\n *\t@fileOverview Math operations and converting in A1 notation\r\n *\tSupports A1 notation like \"A1\" and \"A1:B2\"\r\n *\t@author FLighter\r\n */\r\n\r\nimport A1Col1 \t\t\tfrom './converters/A1-Col-1';// converter 1\r\nimport A1Col2 \t\t\tfrom './converters/A1-Col-2';// converter 2\r\nimport A1Row \t\t\tfrom './converters/A1-Row';\r\nimport ColA1 \t\t\tfrom './converters/Col-A1';\r\nimport RowA1 \t\t\tfrom './converters/Row-A1';\r\nimport isValidA1 \t\tfrom './validation/isValidA1';\r\nimport isValidNumber \tfrom './validation/isValidNumber';\r\nimport A1Error \t\t\tfrom './validation/A1Error';\r\nimport options \t\t\tfrom './options/options';\r\nimport advancedOptions \tfrom './options/advancedOptions';\r\n\r\nclass A1\r\n{\r\n\t// Regular expression for parsing\r\n\tprivate static _reg:RegExp = /^([A-Z]+)(\\d+)(?::([A-Z]+)(\\d+))?$/;\r\n\t/**\r\n\t *\tExample: A1:B2\r\n\t */\r\n\tprivate _colStart: \tnumber \t= 0;// A -> 1\r\n\tprivate _rowStart: \tnumber \t= 0;// 1 -> 1\r\n\tprivate _colEnd: \tnumber \t= 0;// B -> 2\r\n\tprivate _rowEnd: \tnumber \t= 0;// 2 -> 2\r\n\tprivate _converter: 1 | 2 \t= 1;// converter 1 | 2\r\n\r\n\t/**\r\n\t *\tParses A1 notation\r\n\t *\t@param {string} a1\r\n\t *\t@param {1 | 2}  converter\r\n\t *\r\n\t *\t@return {object} {cs: number, rs: number, ce: number, re: number}\r\n\t */\r\n\tprivate static _parse(a1: string, converter: 1 | 2): {cs: number, rs: number, ce: number, re: number}\r\n\t{\r\n\t\tlet [\r\n\t\t\t\t,\r\n\t\t\t\tcs,// col start // A\r\n\t\t\t\trs,// row start // 1\r\n\t\t\t\tce,// col end \t// B\r\n\t\t\t\tre,// row end \t// 2\r\n\t\t\t] = a1.toUpperCase().match(this._reg);\r\n\t\tce = ce || cs;\r\n\t\tre = re || rs;\r\n\t\tlet colStart \t= this._A1Col(cs, converter),\r\n\t\t\tcolEnd \t\t= this._A1Col(ce, converter),\r\n\t\t\trowStart \t= A1Row(rs),\r\n\t\t\trowEnd \t\t= A1Row(re);\r\n\t\t// For non-standard A1\r\n\t\treturn {\r\n\t\t\tcs: colEnd > colStart ? colStart : colEnd,\r\n\t\t\trs: rowEnd > rowStart ? rowStart : rowEnd,\r\n\t\t\tce: colEnd > colStart ? colEnd \t : colStart,\r\n\t\t\tre: rowEnd > rowStart ? rowEnd \t : rowStart,\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t *\tConverts column letter to number using converter 1 or 2\r\n\t *\t@param {string} a1\r\n\t *\t@param {1 | 2} converter\r\n\t *\r\n\t *\t@return {number}\r\n\t */\r\n\tprivate static _A1Col(a1: string, converter: 1 | 2): number\r\n\t{\r\n\t\treturn converter === 1 ? A1Col1(a1) : A1Col2(a1);\r\n\t}\r\n\r\n\t/******************\r\n\t *\tSTATIC METHODS\r\n\t ******************/\r\n\t/**\r\n\t *\tChecks A1 notation\r\n\t *\t@param {string} a1\r\n\t *\r\n\t *\t@return {boolean}\r\n\t */\r\n\tstatic isValid(a1: string): boolean\r\n\t{\r\n\t\treturn isValidA1(a1);\r\n\t}\r\n\t/**\r\n\t *\tConverts the first column letter from A1 to number\r\n\t *\t@param {string} a1\r\n\t *\t@param {1 | 2} [converter = 1]\r\n\t *\r\n\t *\t@return {number}\r\n\t */\r\n\tstatic getCol(a1: string, converter: 1 | 2 = 1): number\r\n\t{\r\n\t\tif(!isValidA1(a1))\r\n\t\t\tthrow new A1Error(a1).wasString();\r\n\t\treturn this._parse(a1, converter).cs;\r\n\t}\r\n\t/**\r\n\t *\tConverts the last column letter from A1 to number\r\n\t *\t@param {string} a1\r\n\t *\t@param {1 | 2} [converter = 1]\r\n\t *\r\n\t *\t@return {number}\r\n\t */\r\n\tstatic getLastCol(a1: string, converter: 1 | 2 = 1): number\r\n\t{\r\n\t\tif(!isValidA1(a1))\r\n\t\t\tthrow new A1Error(a1).wasString();\r\n\t\treturn this._parse(a1, converter).ce;\r\n\t}\r\n\t/**\r\n\t *\tConverts number to column letter in A1\r\n\t *\t@param {number} col\r\n\t *\r\n\t *\t@return {string}\r\n\t */\r\n\tstatic toCol(col: number): string\r\n\t{\r\n\t\tif(!isValidNumber(col))\r\n\t\t\tthrow new A1Error(col).wasNumber();\r\n\t\treturn ColA1(col);\r\n\t}\r\n\t/**\r\n\t *\tConverts the first row string to number\r\n\t *\t@param {string} a1\r\n\t *\r\n\t *\t@return {number}\r\n\t */\r\n\tstatic getRow(a1: string): number\r\n\t{\r\n\t\tif(!isValidA1(a1))\r\n\t\t\tthrow new A1Error(a1).wasString();\r\n\t\treturn this._parse(a1, 1).rs;\r\n\t}\r\n\t/**\r\n\t *\tConverts the last row string to number\r\n\t *\t@param {string} a1\r\n\t *\r\n\t *\t@return {number}\r\n\t */\r\n\tstatic getLastRow(a1: string): number\r\n\t{\r\n\t\tif(!isValidA1(a1))\r\n\t\t\tthrow new A1Error(a1).wasString();\r\n\t\treturn this._parse(a1, 1).re;\r\n\t}\r\n\t/**\r\n\t *\tConverts number to row string in A1\r\n\t *\t@param {number} row\r\n\t *\r\n\t *\t@return {string}\r\n\t */\r\n\tstatic toRow(row: number): string\r\n\t{\r\n\t\tif(!isValidNumber(row))\r\n\t\t\tthrow new A1Error(row).wasNumber();\r\n\t\treturn RowA1(row);\r\n\t}\r\n\t/**\r\n\t *\t@param {string} a1\r\n\t *\t@param {1 | 2} [converter = 1]\r\n\t *\r\n\t *\t@return {number} columns count\r\n\t */\r\n\tstatic getWidth(a1: string, converter: 1 | 2 = 1): number\r\n\t{\r\n\t\tif(!isValidA1(a1))\r\n\t\t\tthrow new A1Error(a1).wasString();\r\n\t\tlet {ce, cs} = this._parse(a1, converter);\r\n\t\treturn ce - cs + 1;\r\n\t}\r\n\t/**\r\n\t *\t@param {string} a1\r\n\t *\r\n\t *\t@return {number} rows count\r\n\t */\r\n\tstatic getHeight(a1: string): number\r\n\t{\r\n\t\tif(!isValidA1(a1))\r\n\t\t\tthrow new A1Error(a1).wasString();\r\n\t\tlet {re, rs} = this._parse(a1, 1);\r\n\t\treturn re - rs + 1;\r\n\t}\r\n\r\n\t/***************\r\n\t *\tCONSTRUCTOR\r\n\t ***************/\r\n\t/**\r\n\t *\tIt handles case:\r\n\t *\tconstructor(object: options)\r\n\t *\t@param {options[]} args\r\n\t */\r\n\tprivate _initObject(...args: options[]): void\r\n\t{\r\n\t\tconst \tisString = <T>(some: T) => typeof some === 'string',\r\n\t\t\t\tareEmpty = (all: advancedOptions, excludingKeys: string | string[]) =>\r\n\t\t\t\t{\r\n\t\t\t\t\t!Array.isArray(excludingKeys) && (excludingKeys = [excludingKeys]);\r\n\t\t\t\t\tfor(let key in all)\r\n\t\t\t\t\t\tif(!excludingKeys.includes(key) && all[key].val)\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t};\r\n\t\tlet options \t= args[0],\r\n\t\t\t{converter} = options;\r\n\t\tif(converter && ![1, 2].includes(converter))\r\n\t\t\tthrow new A1Error({converter}).wasUnknown();\r\n\t\tthis._converter = converter || 1;\r\n\t\t// Create object with types\r\n\t\tlet all: advancedOptions = {};\r\n\t\t['colStart', 'rowStart', 'colEnd', 'rowEnd', 'a1Start', 'a1End', 'nCols', 'nRows'].forEach(key =>\r\n\t\t{\r\n\t\t\tlet val  = options[key];\r\n\t\t\tall[key] =\r\n\t\t\t{\r\n\t\t\t\tisString: \tisString(val),\r\n\t\t\t\tisNumber: \tisValidNumber(val),\r\n\t\t\t\tval,\r\n\t\t\t};\r\n\t\t});\r\n\t\tlet {colStart, rowStart, colEnd, rowEnd, a1Start, a1End, nCols, nRows} = all;\r\n\t\t/**\r\n\t\t *\tExecuting by priority\r\n\t\t */\r\n\t\tswitch(true)\r\n\t\t{\r\n\t\t\t/**\r\n\t\t\t *\ta1Start\r\n\t\t\t */\r\n\t\t\tcase(a1Start.isString && areEmpty(all, 'a1Start')):\r\n\t\t\t\treturn this._initString(a1Start.val as string);\r\n\t\t\t/**\r\n\t\t\t *\ta1Start, a1End\r\n\t\t\t */\r\n\t\t\tcase(a1Start.isString && a1End.isString && areEmpty(all, ['a1Start', 'a1End'])):\r\n\t\t\t\treturn this._initString(a1Start.val as string, a1End.val as string);\r\n\t\t\t/**\r\n\t\t\t *\tcolStart, rowStart (string, string)\r\n\t\t\t */\r\n\t\t\tcase(colStart.isString && rowStart.isString && areEmpty(all, ['colStart', 'rowStart'])):\r\n\t\t\t\treturn this._initString(colStart.val+(rowStart.val as string));\r\n\t\t\t/**\r\n\t\t\t *\tcolStart, rowStart (number, number)\r\n\t\t\t */\r\n\t\t\tcase(colStart.isNumber && rowStart.isNumber && areEmpty(all, ['colStart', 'rowStart'])):\r\n\t\t\t\treturn this._initNumber(colStart.val as number, rowStart.val as number);\r\n\t\t\t/**\r\n\t\t\t *\tcolStart, rowStart, nRows (number, number, number)\r\n\t\t\t */\r\n\t\t\tcase(colStart.isNumber && rowStart.isNumber && nRows.isNumber && areEmpty(all, ['colStart', 'rowStart', 'nRows'])):\r\n\t\t\t\treturn this._initNumber(colStart.val as number, rowStart.val as number, nRows.val as number);\r\n\t\t\t/**\r\n\t\t\t *\tcolStart, rowStart, nCols (number, number, number)\r\n\t\t\t */\r\n\t\t\tcase(colStart.isNumber && rowStart.isNumber && nCols.isNumber && areEmpty(all, ['colStart', 'rowStart', 'nCols'])):\r\n\t\t\t\treturn this._initNumber(colStart.val as number, rowStart.val as number, 1, nCols.val as number);\r\n\t\t\t/**\r\n\t\t\t *\tcolStart, rowStart, nRows, nCols (number, number, number, number)\r\n\t\t\t */\r\n\t\t\tcase(colStart.isNumber && rowStart.isNumber && nRows.isNumber && nCols.isNumber && areEmpty(all, ['colStart', 'rowStart', 'nRows', 'nCols'])):\r\n\t\t\t\treturn this._initNumber(colStart.val as number, rowStart.val as number, nRows.val as number, nCols.val as number);\r\n\t\t\t/**\r\n\t\t\t *\tcolStart, rowStart, colEnd (string, string, string)\r\n\t\t\t */\r\n\t\t\tcase(colStart.isString && rowStart.isString && colEnd.isString && areEmpty(all, ['colStart', 'rowStart', 'colEnd'])):\r\n\t\t\t\treturn this._initString(`${colStart.val}${rowStart.val}:${colEnd.val}${rowStart.val}`);\r\n\t\t\t/**\r\n\t\t\t *\tcolStart, rowStart, colEnd (number, number, number)\r\n\t\t\t */\r\n\t\t\tcase(colStart.isNumber && rowStart.isNumber && colEnd.isNumber && areEmpty(all, ['colStart', 'rowStart', 'colEnd'])):\r\n\t\t\t\treturn this._initNumber(\r\n\t\t\t\t\t\tcolStart.val as number,\r\n\t\t\t\t\t\trowStart.val as number,\r\n\t\t\t\t\t\t1,\r\n\t\t\t\t\t\t(colEnd.val as number) - (colStart.val as number) + 1\r\n\t\t\t\t);\r\n\t\t\t/**\r\n\t\t\t *\tcolStart, rowStart, rowEnd (string, string, string)\r\n\t\t\t */\r\n\t\t\tcase(colStart.isString && rowStart.isString && rowEnd.isString && areEmpty(all, ['colStart', 'rowStart', 'rowEnd'])):\r\n\t\t\t\treturn this._initString(`${colStart.val}${rowStart.val}:${colStart.val}${rowEnd.val}`);\r\n\t\t\t/**\r\n\t\t\t *\tcolStart, rowStart, rowEnd (number, number, number)\r\n\t\t\t */\r\n\t\t\tcase(colStart.isNumber && rowStart.isNumber && rowEnd.isNumber && areEmpty(all, ['colStart', 'rowStart', 'rowEnd'])):\r\n\t\t\t\treturn this._initNumber(\r\n\t\t\t\t\t\tcolStart.val as number,\r\n\t\t\t\t\t\trowStart.val as number,\r\n\t\t\t\t\t\t(rowEnd.val as number) - (rowStart.val as number) + 1\r\n\t\t\t\t);\r\n\t\t\t/**\r\n\t\t\t *\tcolStart, rowStart, colEnd, rowEnd (string, string, string, string)\r\n\t\t\t */\r\n\t\t\tcase(colStart.isString && rowStart.isString && colEnd.isString && rowEnd.isString && areEmpty(all, ['colStart', 'rowStart', 'colEnd', 'rowEnd'])):\r\n\t\t\t\treturn this._initString(`${colStart.val}${rowStart.val}:${colEnd.val}${rowEnd.val}`);\r\n\t\t\t/**\r\n\t\t\t *\tcolStart, rowStart, colEnd, rowEnd (number, number, number, number)\r\n\t\t\t */\r\n\t\t\tcase(colStart.isNumber && rowStart.isNumber && colEnd.isNumber && rowEnd.isNumber && areEmpty(all, ['colStart', 'rowStart', 'colEnd', 'rowEnd'])):\r\n\t\t\t\treturn this._initNumber(\r\n\t\t\t\t\t\tcolStart.val as number,\r\n\t\t\t\t\t\trowStart.val as number,\r\n\t\t\t\t\t\t(rowEnd.val as number) - (rowStart.val as number) + 1,\r\n\t\t\t\t\t\t(colEnd.val as number) - (colStart.val as number) + 1\r\n\t\t\t\t);\r\n\t\t\t/**\r\n\t\t\t *\tInvalid arguments combination\r\n\t\t\t */\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new A1Error(options).wasUnknown();\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t *\tIt handles cases:\r\n\t *\tconstructor(col: number, row: number)\r\n\t *\tconstructor(col: number, row: number, nRows: number)\r\n\t *\tconstructor(col: number, row: number, nRows: number, nCols: number)\r\n\t *\t@param {number[]} args\r\n\t */\r\n\tprivate _initNumber(...args: number[]): void\r\n\t{\r\n\t\tlet [col, row, nRows, nCols] = args;\r\n\t\tnRows = nRows || 1;\r\n\t\tnCols = nCols || 1;\r\n\t\tlet all = [col, row, nRows, nCols];\r\n\t\tif(!all.every(n => isValidNumber(n)))\r\n\t\t\tthrow new A1Error(all.join(', ')).wasNumber();\r\n\t\tthis._colStart \t= col;\t\t\t\t// the first col\r\n\t\tthis._rowStart \t= row;\t\t\t\t// the first row\r\n\t\tthis._colEnd \t= col + nCols - 1;\t// how many cols in total (cols length)\r\n\t\tthis._rowEnd \t= row + nRows - 1;\t// how many rows in total (rows length)\r\n\t}\r\n\t/**\r\n\t *\tIt handles cases:\r\n\t *\tconstructor(range: string)\r\n\t *\tconstructor(rangeStart: string, rangeEnd: string)\r\n\t *\t@param {string[]} args\r\n\t */\r\n\tprivate _initString(...args: string[]): void\r\n\t{\r\n\t\tlet [rangeStart, rangeEnd] = args,\r\n\t\t\trange = rangeEnd\r\n\t\t\t\t\t\t? `${rangeStart}:${rangeEnd}`// rangeStart: string, rangeEnd: string\r\n\t\t\t\t\t\t: rangeStart;\t\t\t\t // range: string\r\n\t\tif(!isValidA1(range))\r\n\t\t\tthrow new A1Error(range).wasString();\r\n\t\tlet {cs, rs, ce, re} = A1._parse(range, this._converter);\r\n\t\tthis._colStart \t= cs;\r\n\t\tthis._rowStart \t= rs;\r\n\t\tthis._colEnd \t= ce;\r\n\t\tthis._rowEnd \t= re;\r\n\t}\r\n\t/**\r\n\t *\tConstructor\r\n\t */\r\n\tconstructor(object: options)\r\n\tconstructor(range: string)\r\n\tconstructor(rangeStart: string, rangeEnd: string)\r\n\tconstructor(col: number, row: number)\r\n\tconstructor(col: number, row: number, nRows: number)\r\n\tconstructor(col: number, row: number, nRows: number, nCols: number)\r\n\tconstructor(something: string | number | options, something2?: string | number, nRows?: number, nCols?: number)\r\n\t{\r\n\t\t// No arguments\r\n\t\tif(!arguments.length)\r\n\t\t\tthrow new A1Error().wasUnknown();\r\n\t\tlet type = typeof something;\r\n\t\t// Object\r\n\t\tif(something && type === 'object')\tthis._initObject.apply(this, arguments);\r\n\t\t// Number\r\n\t\telse if(type === 'number')\t\t\tthis._initNumber.apply(this, arguments);\r\n\t\t// String\r\n\t\telse if(type === 'string')\t\t\tthis._initString.apply(this, arguments);\r\n\t\t// Unknown argument\r\n\t\telse\r\n\t\t\tthrow new A1Error(something).wasUnknown();\r\n\t}\r\n\r\n\t/***********\r\n\t *\tMETHODS\r\n\t ***********/\r\n\t/**\r\n\t *\t@return {string} in A1 notation\r\n\t */\r\n\tget(): string\r\n\t{\r\n\t\tlet start \t= ColA1(this._colStart)+RowA1(this._rowStart),\r\n\t\t\tend \t= ColA1(this._colEnd)+RowA1(this._rowEnd);\r\n\t\treturn start === end ? start : `${start}:${end}`;\r\n\t}\r\n\t/**\r\n\t *\t@return {string} in A1 notation\r\n\t */\r\n\ttoString(): string\r\n\t{\r\n\t\treturn this.get();\r\n\t}\r\n\t/**\r\n\t *\t@typedef {Object} Result\r\n\t *\t@property {number} colStart\r\n\t *\t@property {number} rowStart\r\n\t *\t@property {number} colEnd\r\n\t *\t@property {number} rowEnd\r\n\t *\t@property {string} a1\r\n\t *\t@property {number} rowsCount\r\n\t *\t@property {number} colsCount\r\n\t *\r\n\t *\t@return {Result} full information about range\r\n\t */\r\n\ttoJSON(): {\r\n\t\tcolStart: \tnumber,\r\n\t\trowStart: \tnumber,\r\n\t\tcolEnd: \tnumber,\r\n\t\trowEnd: \tnumber,\r\n\t\ta1: \t\tstring,\r\n\t\trowsCount: \tnumber,\r\n\t\tcolsCount: \tnumber,\r\n\t}\r\n\t{\r\n\t\treturn {\r\n\t\t\tcolStart: \tthis._colStart,\r\n\t\t\trowStart: \tthis._rowStart,\r\n\t\t\tcolEnd: \tthis._colEnd,\r\n\t\t\trowEnd: \tthis._rowEnd,\r\n\t\t\ta1: \t\tthis.get(),\r\n\t\t\trowsCount: \tthis._rowEnd - this._rowStart + 1,\r\n\t\t\tcolsCount: \tthis._colEnd - this._colStart + 1,\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t *\t@return {number} start column\r\n\t */\r\n\tgetCol(): number\r\n\t{\r\n\t\treturn this._colStart;\r\n\t}\r\n\t/**\r\n\t *\t@return {number} end column\r\n\t */\r\n\tgetLastCol(): number\r\n\t{\r\n\t\treturn this._colEnd;\r\n\t}\r\n\t/**\r\n\t *\t@return {number} start row\r\n\t */\r\n\tgetRow(): number\r\n\t{\r\n\t\treturn this._rowStart;\r\n\t}\r\n\t/**\r\n\t *\t@return {number} end row\r\n\t */\r\n\tgetLastRow(): number\r\n\t{\r\n\t\treturn this._rowEnd;\r\n\t}\r\n\t/**\r\n\t *\t@return {number} columns count\r\n\t */\r\n\tgetWidth(): number\r\n\t{\r\n\t\treturn this._colEnd - this._colStart + 1;\r\n\t}\r\n\t/**\r\n\t *\t@return {number} rows count\r\n\t */\r\n\tgetHeight(): number\r\n\t{\r\n\t\treturn this._rowEnd - this._rowStart + 1;\r\n\t}\r\n\t/**\r\n\t *\t@return {A1} copy of this object\r\n\t */\r\n\tcopy(): A1\r\n\t{\r\n\t\treturn new A1(this.get());\r\n\t}\r\n\t/**\r\n\t *\tAdds N cells to range along the x-axis\r\n\t *\tif count >= 0 - adds to right\r\n\t *\tif count <  0 - adds to left\r\n\t *\t@param {number} count\r\n\t *\r\n\t *\t@return {this}\r\n\t */\r\n\taddX(count: number): this\r\n\t{\r\n\t\tif(!isValidNumber(count, false))\r\n\t\t\tthrow new A1Error(count).wasUnknown();\r\n\t\tcount >= 0\r\n\t\t\t? this._colEnd \t += count\r\n\t\t\t: this._colStart += count;\r\n\t\t(this._colStart <= 0) && (this._colStart = 1);\r\n\t\treturn this;\r\n\t}\r\n\t/**\r\n\t *\tAdds N cells to range along the y-axis\r\n\t *\tif count >= 0 - adds to bottom\r\n\t *\tif count <  0 - adds to top\r\n\t *\t@param {number} count\r\n\t *\r\n\t *\t@return {this}\r\n\t */\r\n\taddY(count: number): this\r\n\t{\r\n\t\tif(!isValidNumber(count, false))\r\n\t\t\tthrow new A1Error(count).wasUnknown();\r\n\t\tcount >= 0\r\n\t\t\t? this._rowEnd \t += count\r\n\t\t\t: this._rowStart += count;\r\n\t\t(this._rowStart <= 0) && (this._rowStart = 1);\r\n\t\treturn this;\r\n\t}\r\n\t/**\r\n\t *\tAdds N cells to range along the x/y-axis\r\n\t *\t@param {number} countX\r\n\t *\t@param {number} countY\r\n\t *\r\n\t *\t@return {this}\r\n\t */\r\n\tadd(countX: number, countY: number): this\r\n\t{\r\n\t\tthis.addX(countX);\r\n\t\tthis.addY(countY);\r\n\t\treturn this;\r\n\t}\r\n\t/**\r\n\t *\tRemoves N cells from range along the x-axis\r\n\t *\tif count >= 0 - removes from right\r\n\t *\tif count <  0 - removes from left\r\n\t *\t@param {number} count\r\n\t *\r\n\t *\t@return {this}\r\n\t */\r\n\tremoveX(count: number): this\r\n\t{\r\n\t\tif(!isValidNumber(count, false))\r\n\t\t\tthrow new A1Error(count).wasUnknown();\r\n\t\tif(count >= 0)\r\n\t\t{\r\n\t\t\tthis._colEnd -= count;\r\n\t\t\t(this._colEnd < this._colStart) && (this._colEnd = this._colStart);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis._colStart -= count;\r\n\t\t\t(this._colStart > this._colEnd) && (this._colStart = this._colEnd);\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\t/**\r\n\t *\tRemoves N cells from range along the y-axis\r\n\t *\tif count >= 0 - removes from bottom\r\n\t *\tif count <  0 - removes from top\r\n\t *\t@param {number} count\r\n\t *\r\n\t *\t@return {this}\r\n\t */\r\n\tremoveY(count: number): this\r\n\t{\r\n\t\tif(!isValidNumber(count, false))\r\n\t\t\tthrow new A1Error(count).wasUnknown();\r\n\t\tif(count >= 0)\r\n\t\t{\r\n\t\t\tthis._rowEnd -= count;\r\n\t\t\t(this._rowEnd < this._rowStart) && (this._rowEnd = this._rowStart);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis._rowStart -= count;\r\n\t\t\t(this._rowStart > this._rowEnd) && (this._rowStart = this._rowEnd);\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\t/**\r\n\t *\tRemoves N cells from range along the x/y-axis\r\n\t *\t@param {number} countX\r\n\t *\t@param {number} countY\r\n\t *\r\n\t *\t@return {this}\r\n\t */\r\n\tremove(countX: number, countY: number): this\r\n\t{\r\n\t\tthis.removeX(countX);\r\n\t\tthis.removeY(countY);\r\n\t\treturn this;\r\n\t}\r\n\t/**\r\n\t *\tShifts the range along the x-axis\r\n\t *\tIf offset >= 0 - shifts to right\r\n\t *\tIf offset <  0 - shifts to left\r\n\t *\t@param {number} offset\r\n\t *\r\n\t *\t@return {this}\r\n\t */\r\n\tshiftX(offset: number): this\r\n\t{\r\n\t\tif(!isValidNumber(offset, false))\r\n\t\t\tthrow new A1Error(offset).wasUnknown();\r\n\t\tlet diff \t= this._colEnd - this._colStart,\r\n\t\t\tstart \t= this._colStart + offset,\r\n\t\t\tend \t= this._colEnd \t + offset;\r\n\t\tthis._colStart \t= start > 0 ? start : 1;\r\n\t\tthis._colEnd \t= start > 0 ? end \t: diff + 1;\r\n\t\treturn this;\r\n\t}\r\n\t/**\r\n\t *\tShifts the range along the y-axis\r\n\t *\tIf offset >= 0 - shifts to bottom\r\n\t *\tIf offset <  0 - shifts to top\r\n\t *\t@param {number} offset\r\n\t *\r\n\t *\t@return {this}\r\n\t */\r\n\tshiftY(offset: number): this\r\n\t{\r\n\t\tif(!isValidNumber(offset, false))\r\n\t\t\tthrow new A1Error(offset).wasUnknown();\r\n\t\tlet diff \t= this._rowEnd - this._rowStart,\r\n\t\t\tstart \t= this._rowStart + offset,\r\n\t\t\tend \t= this._rowEnd \t + offset;\r\n\t\tthis._rowStart \t= start > 0 ? start : 1;\r\n\t\tthis._rowEnd \t= start > 0 ? end \t: diff + 1;\r\n\t\treturn this;\r\n\t}\r\n\t/**\r\n\t *\tShifts the range along the x/y-axis\r\n\t *\t@param {number} offsetX\r\n\t *\t@param {number} offsetY\r\n\t *\r\n\t *\t@return {this}\r\n\t */\r\n\tshift(offsetX: number, offsetY: number): this\r\n\t{\r\n\t\tthis.shiftX(offsetX);\r\n\t\tthis.shiftY(offsetY);\r\n\t\treturn this;\r\n\t}\r\n}\r\n\r\nexport default A1;"],"names":[],"mappings":"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"}