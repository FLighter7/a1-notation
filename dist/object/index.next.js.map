{"version":3,"file":"index.next.js","sources":["../../src/converters.ts","../../src/validation/isValidA1.ts","../../src/validation/isValidNumber.ts","../../src/validation/A1Error.ts","../../src/index.ts"],"sourcesContent":["/**\n * @file Contains converters from string to number and vice versa\n */\n\n/**\n * Converts column letter to number\n * @author AdamL\n * @see https://stackoverflow.com/questions/21229180/convert-column-index-into-corresponding-column-letter\n * @param {string} col\n *\n * @returns {number}\n */\nexport const colStringToNumber1 = (col: string): number =>\n{\n  const length = col.length;\n  let column = 0;\n  for(let i = 0; i < length; i++)\n    column += (col.charCodeAt(i) - 64) * Math.pow(26, length - i - 1);\n  return column;\n}\n\n/**\n * Converts column letter to number\n * @author Flambino\n * @see https://codereview.stackexchange.com/questions/90112/a1notation-conversion-to-row-column-index\n * @param {string} col\n *\n * @returns {number}\n */\nexport const colStringToNumber2 = (col: string): number =>\n{\n  let i,\n      l,\n      chr,\n      sum   = 0,\n      A     = 'A'.charCodeAt(0),\n      radix = 'Z'.charCodeAt(0) - A + 1;\n  for(i = 0, l = col.length; i < l; i++)\n  {\n    chr = col.charCodeAt(i);\n    sum = sum * radix + chr - A + 1;\n  }\n  return sum;\n}\n\n/**\n * Converts column number to letter\n * @author AdamL\n * @see https://stackoverflow.com/questions/21229180/convert-column-index-into-corresponding-column-letter\n * @param {number} col\n *\n * @returns {string}\n */\nexport const colNumberToString = (col: number): string =>\n{\n  let letter = '',\n      temp;\n  while(col > 0)\n  {\n    temp   = (col - 1) % 26;\n    letter = String.fromCharCode(temp + 65) + letter;\n    col    = (col - temp - 1) / 26;\n  }\n  return letter;\n}\n\n/**\n * Converts row string to number\n * @param {string} row\n *\n * @returns {number}\n */\nexport const rowStringToNumber = (row: string): number => parseInt(row, 10);\n\n/**\n * Converts row number to string\n * @param {number} row\n *\n * @returns {string}\n */\nexport const rowNumberToString = (row: number): string => row.toString();\n","/**\n *\t@fileOverview Checks validation\n *\t@param {string} a1\n *\n *\t@return {boolean}\n */\nexport default function(a1: string): boolean\n{\n\treturn /^[A-Z]+\\d+(:[A-Z]+\\d+)?$/i.test(a1);\n}\n","/**\n *\t@fileOverview Checks number validation\n *\t@param {T} n\n *\t@param {boolean} [positiveOnly = true]\n *\n *\t@return {boolean}\n */\nexport default function<T>(n: T, positiveOnly: boolean = true): boolean\n{\n\tconst isNumber = typeof n === 'number' && Number.isInteger(n);\n\treturn positiveOnly ? (isNumber && +n > 0) : isNumber;\n}\n","/**\n *\t@fileOverview A1 notation errors\n */\nexport default class A1Error<T> extends Error\n{\n\tconstructor(a1: string)\n\tconstructor(col: number)\n\tconstructor(row: number)\n\tconstructor(unknown?: T)\n\tconstructor(something?: string | number | T)\n\t{\n\t\tconst str = JSON.stringify(something);\n\t\tsuper(str);\n\t\tthis.name \t\t= 'A1Error';\n\t\tthis.message \t= str;\n\t}\n\n\twasString(): A1Error<T>\n\t{\n\t\tthis.message = `Invalid A1 notation: ${this.message}`;\n\t\treturn this;\n\t}\n\n\twasNumber(): A1Error<T>\n\t{\n\t\tthis.message = `Invalid A1 number(s): ${this.message}`;\n\t\treturn this;\n\t}\n\n\twasUnknown(): A1Error<T>\n\t{\n\t\tthis.message = `Invalid A1 argument(s): ${this.message}`;\n\t\treturn this;\n\t}\n}\n","/**\n * @file Math operations and converting in A1 notation\n * Supports A1 notation like \"A1\" and \"A1:B2\"\n * @author FLighter\n */\n\nimport {\n  colStringToNumber1,// converter 1\n  colStringToNumber2,// converter 2\n  colNumberToString,\n  rowStringToNumber,\n  rowNumberToString,\n} from './converters';\nimport isValidA1 \t\tfrom './validation/isValidA1';\nimport isValidNumber \tfrom './validation/isValidNumber';\nimport A1Error \t\t\tfrom './validation/A1Error';\nimport options \t\t\tfrom './options/options';\n\nclass A1\n{\n  // Regular expression for parsing\n  private static _reg:RegExp = /^([A-Z]+)(\\d+)(?::([A-Z]+)(\\d+))?$/;\n  /**\n   *\tExample: A1:B2\n   */\n  private _colStart: \tnumber \t= 0;// A -> 1\n  private _rowStart: \tnumber \t= 0;// 1 -> 1\n  private _colEnd: \tnumber \t= 0;// B -> 2\n  private _rowEnd: \tnumber \t= 0;// 2 -> 2\n  private _converter: 1 | 2 \t= 1;// converter 1 | 2\n\n  /**\n   *\tParses A1 notation\n   *\t@param {string} a1\n   *\t@param {1 | 2}  converter\n   *\n   *\t@return {object} {cs: number, rs: number, ce: number, re: number}\n   */\n  private static _parse(a1: string, converter: 1 | 2): {cs: number, rs: number, ce: number, re: number}\n  {\n    let [\n        ,\n        cs,// col start // A\n        rs,// row start // 1\n        ce,// col end \t// B\n        re,// row end \t// 2\n      ] = a1.toUpperCase().match(this._reg);\n    ce = ce || cs;\n    re = re || rs;\n    const colStart = this._A1Col(cs, converter),\n          colEnd   = this._A1Col(ce, converter),\n          rowStart = rowStringToNumber(rs),\n          rowEnd   = rowStringToNumber(re);\n    // For non-standard A1\n    return {\n      cs: colEnd > colStart ? colStart : colEnd,\n      rs: rowEnd > rowStart ? rowStart : rowEnd,\n      ce: colEnd > colStart ? colEnd \t : colStart,\n      re: rowEnd > rowStart ? rowEnd \t : rowStart,\n    }\n  }\n  /**\n   *\tConverts column letter to number using converter 1 or 2\n   *\t@param {string} a1\n   *\t@param {1 | 2} converter\n   *\n   *\t@return {number}\n   */\n  private static _A1Col(a1: string, converter: 1 | 2): number\n  {\n    return converter === 1 ? colStringToNumber1(a1) : colStringToNumber2(a1);\n  }\n\n  /******************\n   *\tSTATIC METHODS\n   ******************/\n  /**\n   *\tChecks A1 notation\n   *\t@param {string} a1\n   *\n   *\t@return {boolean}\n   */\n  static isValid(a1: string): boolean\n  {\n    return isValidA1(a1);\n  }\n  /**\n   *\tConverts the first column letter from A1 to number\n   *\t@param {string} a1\n   *\t@param {1 | 2} [converter = 1]\n   *\n   *\t@return {number}\n   */\n  static getCol(a1: string, converter: 1 | 2 = 1): number\n  {\n    if(!isValidA1(a1))\n      throw new A1Error(a1).wasString();\n    return this._parse(a1, converter).cs;\n  }\n  /**\n   *\tConverts the last column letter from A1 to number\n   *\t@param {string} a1\n   *\t@param {1 | 2} [converter = 1]\n   *\n   *\t@return {number}\n   */\n  static getLastCol(a1: string, converter: 1 | 2 = 1): number\n  {\n    if(!isValidA1(a1))\n      throw new A1Error(a1).wasString();\n    return this._parse(a1, converter).ce;\n  }\n  /**\n   *\tConverts number to column letter in A1\n   *\t@param {number} col\n   *\n   *\t@return {string}\n   */\n  static toCol(col: number): string\n  {\n    if(!isValidNumber(col))\n      throw new A1Error(col).wasNumber();\n    return colNumberToString(col);\n  }\n  /**\n   *\tConverts the first row string to number\n   *\t@param {string} a1\n   *\n   *\t@return {number}\n   */\n  static getRow(a1: string): number\n  {\n    if(!isValidA1(a1))\n      throw new A1Error(a1).wasString();\n    return this._parse(a1, 1).rs;\n  }\n  /**\n   *\tConverts the last row string to number\n   *\t@param {string} a1\n   *\n   *\t@return {number}\n   */\n  static getLastRow(a1: string): number\n  {\n    if(!isValidA1(a1))\n      throw new A1Error(a1).wasString();\n    return this._parse(a1, 1).re;\n  }\n  /**\n   *\tConverts number to row string in A1\n   *\t@param {number} row\n   *\n   *\t@return {string}\n   */\n  static toRow(row: number): string\n  {\n    if(!isValidNumber(row))\n      throw new A1Error(row).wasNumber();\n    return rowNumberToString(row);\n  }\n  /**\n   *\t@param {string} a1\n   *\t@param {1 | 2} [converter = 1]\n   *\n   *\t@return {number} columns count\n   */\n  static getWidth(a1: string, converter: 1 | 2 = 1): number\n  {\n    if(!isValidA1(a1))\n      throw new A1Error(a1).wasString();\n    let {ce, cs} = this._parse(a1, converter);\n    return ce - cs + 1;\n  }\n  /**\n   *\t@param {string} a1\n   *\n   *\t@return {number} rows count\n   */\n  static getHeight(a1: string): number\n  {\n    if(!isValidA1(a1))\n      throw new A1Error(a1).wasString();\n    let {re, rs} = this._parse(a1, 1);\n    return re - rs + 1;\n  }\n\n  /***************\n   *\tCONSTRUCTOR\n   ***************/\n\n  /**\n   *\tIt handles case:\n   *\tconstructor(object: options)\n   *\t@param {options} options\n   */\n  private _initObject(options: options): void\n  {\n    const isString = <T>(some: T) => typeof some === 'string';\n    const isNumber = isValidNumber;\n    const isLetter    = (some: string) => /^[a-z]+$/i.test(some);\n    const isStrNumber = <T>(some: T) => typeof some === 'string' ? /^[0-9]+$/.test(some) : false;\n    const isStringifiedNumber = <T>(some: T) => isStrNumber(some) && isNumber(+some);\n\n    const {\n      a1Start,\n      a1End,\n      colStart,\n      colEnd,\n      rowStart,\n      rowEnd,\n      nCols,\n      nRows,\n      converter,\n    } = options;\n\n    // Set converter\n    this._converter = converter === 2 ? 2 : 1;\n\n    let cs: number,\n        ce: number,\n        rs: number,\n        re: number;\n\n    /**\n     * Define start range\n     */\n\n    // From a1Start\n    if(isString(a1Start) && isValidA1(a1Start))\n    {\n      const a1StartParsed = A1._parse(a1Start, this._converter);\n      cs = a1StartParsed.cs;\n      rs = a1StartParsed.rs;\n      const equalCol = a1StartParsed.cs === a1StartParsed.ce,\n            equalRow = a1StartParsed.rs === a1StartParsed.re,\n            equal    = equalCol && equalRow;\n      if(!equal || (equal && a1Start.includes(':')))\n      {\n        ce = a1StartParsed.ce;\n        re = a1StartParsed.re;\n      }\n    }\n\n    // From colStart\n    if(!cs && colStart)\n    {\n      if(isNumber(colStart))\n        cs = colStart as number;\n      else if(isString(colStart))\n      {\n        if(isLetter(colStart as string))\n          cs = A1._A1Col(colStart as string, this._converter);\n        else if(isStringifiedNumber(colStart))\n          cs = +colStart;\n      }\n    }\n\n    // From rowStart\n    if(!rs && (isNumber(rowStart) || isStringifiedNumber(rowStart)))\n      rs = +rowStart;\n\n    /**\n     * Define end range\n     */\n\n    // From a1End\n    if(!ce && !re && isString(a1End) && isValidA1(a1End))\n    {\n      const a1EndParsed = A1._parse(a1End, this._converter);\n      ce = a1EndParsed.ce;\n      re = a1EndParsed.re;\n    }\n\n    // From colEnd\n    if(!ce && colEnd)\n    {\n      if(isNumber(colEnd))\n        ce = colEnd as number;\n      else if(isString(colEnd))\n      {\n        if(isLetter(colEnd as string))\n          ce = A1._A1Col(colEnd as string, this._converter);\n        else if(isStringifiedNumber(colEnd))\n          ce = +colEnd;\n      }\n    }\n\n    // From rowEnd\n    if(!re && (isNumber(rowEnd) || isStringifiedNumber(rowEnd)))\n      re = +rowEnd;\n\n    // From nCols\n    if(!ce && cs && isNumber(nCols))\n      ce = cs + nCols - 1;\n\n    // From nRows\n    if(!re && rs && isNumber(nRows))\n      re = rs + nRows - 1;\n    \n    /**\n     * If only start/end range was defined\n     */\n    (cs && !ce) && (ce = cs);\n    (!cs && ce) && (cs = ce);\n    (rs && !re) && (re = rs);\n    (!rs && re) && (rs = re);\n\n    /**\n     * Check results\n     */\n    if(!cs || !rs || !ce || !re)\n      throw new A1Error(options).wasUnknown();\n\n    /**\n     * Set ranges\n     */\n    this._colStart = cs;\n    this._rowStart = rs;\n    this._colEnd   = ce;\n    this._rowEnd   = re;\n  }\n\n  /**\n   *\tIt handles cases:\n   *\tconstructor(col: number, row: number)\n   *\tconstructor(col: number, row: number, nRows: number)\n   *\tconstructor(col: number, row: number, nRows: number, nCols: number)\n   *\t@param {number[]} args\n   */\n  private _initNumber(...args: number[]): void\n  {\n    let [col, row, nRows, nCols] = args;\n    nRows = nRows || 1;\n    nCols = nCols || 1;\n    let all = [col, row, nRows, nCols];\n    if(!all.every(n => isValidNumber(n)))\n      throw new A1Error(all.join(', ')).wasNumber();\n    this._colStart \t= col;\t\t\t\t// the first col\n    this._rowStart \t= row;\t\t\t\t// the first row\n    this._colEnd \t= col + nCols - 1;\t// how many cols in total (cols length)\n    this._rowEnd \t= row + nRows - 1;\t// how many rows in total (rows length)\n  }\n\n  /**\n   *\tIt handles cases:\n   *\tconstructor(range: string)\n   *\tconstructor(rangeStart: string, rangeEnd: string)\n   *\t@param {string[]} args\n   */\n  private _initString(...args: string[]): void\n  {\n    const [rangeStart, rangeEnd] = args;\n    const range = rangeEnd\n      ? `${rangeStart}:${rangeEnd}`// rangeStart: string, rangeEnd: string\n      : rangeStart;                // range: string\n    if(!isValidA1(range))\n      throw new A1Error(range).wasString();\n    const {cs, rs, ce, re} = A1._parse(range, this._converter);\n    this._colStart = cs;\n    this._rowStart = rs;\n    this._colEnd   = ce;\n    this._rowEnd   = re;\n  }\n\n  /**\n   *\tConstructor\n   */\n  constructor(object: options)\n  constructor(range: string)\n  constructor(rangeStart: string, rangeEnd: string)\n  constructor(col: number, row: number)\n  constructor(col: number, row: number, nRows: number)\n  constructor(col: number, row: number, nRows: number, nCols: number)\n  constructor(something: string | number | options, something2?: string | number, nRows?: number, nCols?: number)\n  {\n    // No arguments\n    if(!arguments.length)\n      throw new A1Error().wasUnknown();\n    const type = typeof something;\n    // Object\n    if(something && type === 'object')\n      this._initObject(something as options);\n    // Number\n    else if(type === 'number')\n      this._initNumber.apply(this, arguments);\n    // String\n    else if(type === 'string')\n      this._initString.apply(this, arguments);\n    // Unknown argument\n    else\n      throw new A1Error(something).wasUnknown();\n  }\n\n  /***********\n   *\tMETHODS\n   ***********/\n  /**\n   *\t@return {string} in A1 notation\n   */\n  get(): string\n  {\n    let start \t= colNumberToString(this._colStart)+rowNumberToString(this._rowStart),\n      end \t= colNumberToString(this._colEnd)+rowNumberToString(this._rowEnd);\n    return start === end ? start : `${start}:${end}`;\n  }\n  /**\n   *\t@return {string} in A1 notation\n   */\n  toString(): string\n  {\n    return this.get();\n  }\n  /**\n   *\t@typedef {Object} Result\n   *\t@property {number} colStart\n   *\t@property {number} rowStart\n   *\t@property {number} colEnd\n   *\t@property {number} rowEnd\n   *\t@property {string} a1\n   *\t@property {number} rowsCount\n   *\t@property {number} colsCount\n   *\n   *\t@return {Result} full information about range\n   */\n  toJSON(): {\n    colStart: \tnumber,\n    rowStart: \tnumber,\n    colEnd: \tnumber,\n    rowEnd: \tnumber,\n    a1: \t\tstring,\n    rowsCount: \tnumber,\n    colsCount: \tnumber,\n  }\n  {\n    return {\n      colStart: \tthis._colStart,\n      rowStart: \tthis._rowStart,\n      colEnd: \tthis._colEnd,\n      rowEnd: \tthis._rowEnd,\n      a1: \t\tthis.get(),\n      rowsCount: \tthis._rowEnd - this._rowStart + 1,\n      colsCount: \tthis._colEnd - this._colStart + 1,\n    }\n  }\n  /**\n   *\t@return {number} start column\n   */\n  getCol(): number\n  {\n    return this._colStart;\n  }\n  /**\n   *\t@return {number} end column\n   */\n  getLastCol(): number\n  {\n    return this._colEnd;\n  }\n  /**\n   *\t@return {number} start row\n   */\n  getRow(): number\n  {\n    return this._rowStart;\n  }\n  /**\n   *\t@return {number} end row\n   */\n  getLastRow(): number\n  {\n    return this._rowEnd;\n  }\n  /**\n   *\t@return {number} columns count\n   */\n  getWidth(): number\n  {\n    return this._colEnd - this._colStart + 1;\n  }\n  /**\n   *\t@return {number} rows count\n   */\n  getHeight(): number\n  {\n    return this._rowEnd - this._rowStart + 1;\n  }\n  /**\n   *\t@return {A1} copy of this object\n   */\n  copy(): A1\n  {\n    return new A1(this.get());\n  }\n  /**\n   *\tAdds N cells to range along the x-axis\n   *\tif count >= 0 - adds to right\n   *\tif count <  0 - adds to left\n   *\t@param {number} count\n   *\n   *\t@return {this}\n   */\n  addX(count: number): this\n  {\n    if(!isValidNumber(count, false))\n      throw new A1Error(count).wasUnknown();\n    count >= 0\n      ? this._colEnd \t += count\n      : this._colStart += count;\n    (this._colStart <= 0) && (this._colStart = 1);\n    return this;\n  }\n  /**\n   *\tAdds N cells to range along the y-axis\n   *\tif count >= 0 - adds to bottom\n   *\tif count <  0 - adds to top\n   *\t@param {number} count\n   *\n   *\t@return {this}\n   */\n  addY(count: number): this\n  {\n    if(!isValidNumber(count, false))\n      throw new A1Error(count).wasUnknown();\n    count >= 0\n      ? this._rowEnd \t += count\n      : this._rowStart += count;\n    (this._rowStart <= 0) && (this._rowStart = 1);\n    return this;\n  }\n  /**\n   *\tAdds N cells to range along the x/y-axis\n   *\t@param {number} countX\n   *\t@param {number} countY\n   *\n   *\t@return {this}\n   */\n  add(countX: number, countY: number): this\n  {\n    this.addX(countX);\n    this.addY(countY);\n    return this;\n  }\n  /**\n   *\tRemoves N cells from range along the x-axis\n   *\tif count >= 0 - removes from right\n   *\tif count <  0 - removes from left\n   *\t@param {number} count\n   *\n   *\t@return {this}\n   */\n  removeX(count: number): this\n  {\n    if(!isValidNumber(count, false))\n      throw new A1Error(count).wasUnknown();\n    if(count >= 0)\n    {\n      this._colEnd -= count;\n      (this._colEnd < this._colStart) && (this._colEnd = this._colStart);\n    }\n    else\n    {\n      this._colStart -= count;\n      (this._colStart > this._colEnd) && (this._colStart = this._colEnd);\n    }\n    return this;\n  }\n  /**\n   *\tRemoves N cells from range along the y-axis\n   *\tif count >= 0 - removes from bottom\n   *\tif count <  0 - removes from top\n   *\t@param {number} count\n   *\n   *\t@return {this}\n   */\n  removeY(count: number): this\n  {\n    if(!isValidNumber(count, false))\n      throw new A1Error(count).wasUnknown();\n    if(count >= 0)\n    {\n      this._rowEnd -= count;\n      (this._rowEnd < this._rowStart) && (this._rowEnd = this._rowStart);\n    }\n    else\n    {\n      this._rowStart -= count;\n      (this._rowStart > this._rowEnd) && (this._rowStart = this._rowEnd);\n    }\n    return this;\n  }\n  /**\n   *\tRemoves N cells from range along the x/y-axis\n   *\t@param {number} countX\n   *\t@param {number} countY\n   *\n   *\t@return {this}\n   */\n  remove(countX: number, countY: number): this\n  {\n    this.removeX(countX);\n    this.removeY(countY);\n    return this;\n  }\n  /**\n   *\tShifts the range along the x-axis\n   *\tIf offset >= 0 - shifts to right\n   *\tIf offset <  0 - shifts to left\n   *\t@param {number} offset\n   *\n   *\t@return {this}\n   */\n  shiftX(offset: number): this\n  {\n    if(!isValidNumber(offset, false))\n      throw new A1Error(offset).wasUnknown();\n    let diff \t= this._colEnd - this._colStart,\n      start \t= this._colStart + offset,\n      end \t= this._colEnd \t + offset;\n    this._colStart \t= start > 0 ? start : 1;\n    this._colEnd \t= start > 0 ? end \t: diff + 1;\n    return this;\n  }\n  /**\n   *\tShifts the range along the y-axis\n   *\tIf offset >= 0 - shifts to bottom\n   *\tIf offset <  0 - shifts to top\n   *\t@param {number} offset\n   *\n   *\t@return {this}\n   */\n  shiftY(offset: number): this\n  {\n    if(!isValidNumber(offset, false))\n      throw new A1Error(offset).wasUnknown();\n    let diff \t= this._rowEnd - this._rowStart,\n      start \t= this._rowStart + offset,\n      end \t= this._rowEnd \t + offset;\n    this._rowStart \t= start > 0 ? start : 1;\n    this._rowEnd \t= start > 0 ? end \t: diff + 1;\n    return this;\n  }\n  /**\n   *\tShifts the range along the x/y-axis\n   *\t@param {number} offsetX\n   *\t@param {number} offsetY\n   *\n   *\t@return {this}\n   */\n  shift(offsetX: number, offsetY: number): this\n  {\n    this.shiftX(offsetX);\n    this.shiftY(offsetY);\n    return this;\n  }\n}\n\nexport default A1;\n"],"names":[],"mappings":"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"}